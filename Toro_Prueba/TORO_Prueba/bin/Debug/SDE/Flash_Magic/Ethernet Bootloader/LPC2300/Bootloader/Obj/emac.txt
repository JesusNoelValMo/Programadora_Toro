; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--thumb --debug -c --asm --interleave -o.\Obj\emac.o --depend=.\Obj\emac.d --apcs=interwork -O3 -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\Philips --omf_browse=.\Obj\emac.crf ethernet\emac.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  write_PHY PROC
;;;89     //*****************************************************//
;;;90     void write_PHY (int PhyReg, int Value) {
000000  22ff              MOVS     r2,#0xff
;;;91       unsigned int tout;
;;;92     
;;;93       MAC_MADR = (PHY_ADDRESS<<8) | PhyReg;
000002  3201              ADDS     r2,#1
000004  4310              ORRS     r0,r0,r2
000006  4afa              LDR      r2,|L1.1008|
000008  6290              STR      r0,[r2,#0x28]
;;;94       MAC_MWTD = Value;
00000a  62d1              STR      r1,[r2,#0x2c]
;;;95     
;;;96       /* Wait utill operation completed */
;;;97       tout = 0;
00000c  2000              MOVS     r0,#0
;;;98       for (tout = 0; tout < MII_WR_TOUT; tout++) {
00000e  2105              MOVS     r1,#5
000010  0409              LSLS     r1,r1,#16
                  |L1.18|
;;;99         if ((MAC_MIND & MIND_BUSY) == 0) {
000012  6b53              LDR      r3,[r2,#0x34]
000014  07db              LSLS     r3,r3,#31
000016  d002              BEQ      |L1.30|
000018  1c40              ADDS     r0,r0,#1              ;98
00001a  4288              CMP      r0,r1                 ;98
00001c  d3f9              BCC      |L1.18|
                  |L1.30|
;;;100          break;
;;;101        }
;;;102      }
;;;103    }
00001e  4770              BX       lr
;;;104    
                          ENDP

                  read_PHY PROC
;;;105    unsigned short read_PHY (unsigned char PhyReg) {
000020  49f3              LDR      r1,|L1.1008|
;;;106      unsigned int tout;
;;;107    
;;;108      MAC_MADR = (PHY_ADDRESS<<8) | PhyReg;
000022  30ff              ADDS     r0,r0,#0xff
000024  3001              ADDS     r0,#1
000026  6288              STR      r0,[r1,#0x28]
;;;109      MAC_MCMD = MCMD_READ;
000028  2001              MOVS     r0,#1
00002a  6248              STR      r0,[r1,#0x24]
;;;110    
;;;111      /* Wait until operation completed */
;;;112      tout = 0;
00002c  2000              MOVS     r0,#0
;;;113      for (tout = 0; tout < MII_RD_TOUT; tout++) {
00002e  2205              MOVS     r2,#5
000030  0412              LSLS     r2,r2,#16
                  |L1.50|
;;;114        if ((MAC_MIND & MIND_BUSY) == 0) {
000032  6b4b              LDR      r3,[r1,#0x34]
000034  07db              LSLS     r3,r3,#31
000036  d002              BEQ      |L1.62|
000038  1c40              ADDS     r0,r0,#1              ;113
00003a  4290              CMP      r0,r2                 ;113
00003c  d3f9              BCC      |L1.50|
                  |L1.62|
;;;115          break;
;;;116        }
;;;117      }
;;;118      MAC_MCMD = 0;
00003e  2000              MOVS     r0,#0
000040  6248              STR      r0,[r1,#0x24]
;;;119      return (MAC_MRDD);
000042  6b08              LDR      r0,[r1,#0x30]
000044  0400              LSLS     r0,r0,#16
000046  0c00              LSRS     r0,r0,#16
;;;120    }
000048  4770              BX       lr
;;;121    
                          ENDP

                  ReadFrame_EMAC PROC
;;;122    unsigned short ReadFrame_EMAC(void)
00004a  4aea              LDR      r2,|L1.1012|
;;;123    {
;;;124      return (*rxptr++);
00004c  6891              LDR      r1,[r2,#8]  ; rxptr
00004e  8808              LDRH     r0,[r1,#0]
000050  1c89              ADDS     r1,r1,#2
000052  6091              STR      r1,[r2,#8]  ; rxptr
;;;125    }
000054  4770              BX       lr
;;;126    
                          ENDP

                  CopyFromFrame_EMAC PROC
;;;127    void CopyFromFrame_EMAC(void *Dest, unsigned short Size) {
000056  b510              PUSH     {r4,lr}
000058  000c              MOVS     r4,r1
;;;128      unsigned short * piDest;                       
;;;129    
;;;130      piDest = Dest;                                 
00005a  0003              MOVS     r3,r0
;;;131      while (Size > 1) {
00005c  e006              B        |L1.108|
                  |L1.94|
;;;132        *piDest++ = ReadFrame_EMAC();
00005e  f7fffffe          BL       ReadFrame_EMAC
000062  8018              STRH     r0,[r3,#0]
000064  1c9b              ADDS     r3,r3,#2
;;;133        Size -= 2;
000066  1ea4              SUBS     r4,r4,#2
000068  0424              LSLS     r4,r4,#16
00006a  0c24              LSRS     r4,r4,#16
                  |L1.108|
00006c  2c01              CMP      r4,#1                 ;131
00006e  d8f6              BHI      |L1.94|
;;;134      } 
;;;135      if (Size) {                                         
000070  2c00              CMP      r4,#0
000072  d002              BEQ      |L1.122|
;;;136        *(unsigned char *)piDest = (char)ReadFrame_EMAC();
000074  f7fffffe          BL       ReadFrame_EMAC
000078  7018              STRB     r0,[r3,#0]
                  |L1.122|
;;;137      }                                                   
;;;138    }
00007a  bc10              POP      {r4}
00007c  bc08              POP      {r3}
00007e  4718              BX       r3
;;;139    
                          ENDP

                  same_mac PROC
;;;140    int same_mac(char * mac1,char * mac2) {
000080  b410              PUSH     {r4}
;;;141      int i;
;;;142      
;;;143      for(i=0; i<6; i++) {
000082  2200              MOVS     r2,#0
                  |L1.132|
;;;144        if(mac1[i] != mac2[i])
000084  5c83              LDRB     r3,[r0,r2]
000086  5c8c              LDRB     r4,[r1,r2]
000088  42a3              CMP      r3,r4
00008a  d002              BEQ      |L1.146|
;;;145    	  return false;
00008c  2000              MOVS     r0,#0
                  |L1.142|
;;;146      }
;;;147      return true;
;;;148    }
00008e  bc10              POP      {r4}
000090  4770              BX       lr
                  |L1.146|
000092  1c52              ADDS     r2,r2,#1              ;143
000094  2a06              CMP      r2,#6                 ;143
000096  dbf5              BLT      |L1.132|
000098  2001              MOVS     r0,#1                 ;147
00009a  e7f8              B        |L1.142|
;;;149    
                          ENDP

                  filter_pass PROC
;;;150    int filter_pass(void) {
00009c  b530              PUSH     {r4,r5,lr}
;;;151    
;;;152       if (!synchro)
00009e  4cd5              LDR      r4,|L1.1012|
0000a0  7820              LDRB     r0,[r4,#0]  ; synchro
0000a2  2800              CMP      r0,#0
0000a4  d013              BEQ      |L1.206|
;;;153         return true;
;;;154    
;;;155       if(! same_mac(FRAMEr->source,HostMAC)) {
0000a6  4dd4              LDR      r5,|L1.1016|
0000a8  0021              MOVS     r1,r4
0000aa  311a              ADDS     r1,r1,#0x1a
0000ac  1da8              ADDS     r0,r5,#6
0000ae  f7fffffe          BL       same_mac
0000b2  2800              CMP      r0,#0
0000b4  d007              BEQ      |L1.198|
;;;156    #if ETHERNET_DEBUG
;;;157    	 print("Frame from different MAC: Filtered out!\n");
;;;158    #endif   	
;;;159         return false;
;;;160       }
;;;161       if(PACKETr->destport != DestPort) {
0000b6  8ca8              LDRH     r0,[r5,#0x24]  ; rxbuffer
0000b8  88a1              LDRH     r1,[r4,#4]  ; DestPort
0000ba  4288              CMP      r0,r1
0000bc  d103              BNE      |L1.198|
;;;162    #if ETHERNET_DEBUG
;;;163    	 print("Packet from different Destination Port: Filtered out!\n");
;;;164    #endif 
;;;165         return false;
;;;166       }
;;;167       if(PACKETr->srcport != SrcPort) {
0000be  8c68              LDRH     r0,[r5,#0x22]  ; rxbuffer
0000c0  88e1              LDRH     r1,[r4,#6]  ; SrcPort
0000c2  4288              CMP      r0,r1
0000c4  d003              BEQ      |L1.206|
                  |L1.198|
;;;168    #if ETHERNET_DEBUG
;;;169    	 print("Packet to different Source Port: Filtered out!\n");
;;;170    #endif 
;;;171         return false;
0000c6  2000              MOVS     r0,#0
                  |L1.200|
;;;172       }
;;;173       return true;
;;;174    }
0000c8  bc30              POP      {r4,r5}
0000ca  bc08              POP      {r3}
0000cc  4718              BX       r3
                  |L1.206|
0000ce  2001              MOVS     r0,#1                 ;173
0000d0  e7fa              B        |L1.200|
;;;175    
                          ENDP

                  WriteFrame_EMAC PROC
;;;176    void WriteFrame_EMAC(unsigned short Data)
0000d2  4bc8              LDR      r3,|L1.1012|
;;;177    {
;;;178      *txptr++ = Data;
0000d4  68d9              LDR      r1,[r3,#0xc]  ; txptr
0000d6  1c8a              ADDS     r2,r1,#2
0000d8  8008              STRH     r0,[r1,#0]
;;;179    }
0000da  60da              STR      r2,[r3,#0xc]  ; txptr
0000dc  4770              BX       lr
;;;180    
                          ENDP

                  CopyToFrame_EMAC PROC
;;;181    void CopyToFrame_EMAC(void *Source, unsigned int Size)
0000de  b530              PUSH     {r4,r5,lr}
;;;182    {
;;;183      unsigned short * piSource;
;;;184    
;;;185      piSource = Source;
0000e0  0004              MOVS     r4,r0
;;;186      Size = (Size + 1) & 0xFFFE;    
0000e2  48c6              LDR      r0,|L1.1020|
0000e4  1c49              ADDS     r1,r1,#1
0000e6  4001              ANDS     r1,r1,r0
0000e8  000d              MOVS     r5,r1
;;;187      while (Size > 0) {
0000ea  e004              B        |L1.246|
                  |L1.236|
;;;188        WriteFrame_EMAC(*piSource++);
0000ec  8820              LDRH     r0,[r4,#0]
0000ee  1ca4              ADDS     r4,r4,#2
0000f0  f7fffffe          BL       WriteFrame_EMAC
;;;189        Size -= 2;
0000f4  1ead              SUBS     r5,r5,#2
                  |L1.246|
0000f6  2d00              CMP      r5,#0                 ;187
0000f8  d1f8              BNE      |L1.236|
;;;190      }
;;;191    }
0000fa  e7e5              B        |L1.200|
;;;192    
                          ENDP

                  chksum16 PROC
;;;193    int chksum16(void *buf1, short len) {
0000fc  b410              PUSH     {r4}
;;;194      unsigned short * buf = buf1;
;;;195      int chksum16, chksum=0;
0000fe  2300              MOVS     r3,#0
;;;196    
;;;197      while(len > 0) {	
000100  e00f              B        |L1.290|
                  |L1.258|
;;;198        if (len == 1)
;;;199          chksum16 = ((*buf)&0x00FF);
000102  8802              LDRH     r2,[r0,#0]
000104  2901              CMP      r1,#1                 ;198
000106  d102              BNE      |L1.270|
000108  0612              LSLS     r2,r2,#24
00010a  0e12              LSRS     r2,r2,#24
00010c  e7ff              B        |L1.270|
                  |L1.270|
;;;200        else
;;;201          chksum16 = (*buf);
;;;202        chksum = chksum + HTONS(chksum16);
00010e  0614              LSLS     r4,r2,#24
000110  0412              LSLS     r2,r2,#16
000112  0c24              LSRS     r4,r4,#16
000114  0e12              LSRS     r2,r2,#24
000116  4314              ORRS     r4,r4,r2
000118  18e3              ADDS     r3,r4,r3
;;;203        *buf++;
00011a  1c80              ADDS     r0,r0,#2
;;;204        len -=2;
00011c  1e89              SUBS     r1,r1,#2
00011e  0409              LSLS     r1,r1,#16
000120  1409              ASRS     r1,r1,#16
                  |L1.290|
000122  2900              CMP      r1,#0                 ;197
000124  dced              BGT      |L1.258|
;;;205      }
;;;206      return (~(chksum + ((chksum & 0xFFFF0000) >> 16))&0xFFFF);
000126  0c18              LSRS     r0,r3,#16
000128  18c0              ADDS     r0,r0,r3
00012a  43c0              MVNS     r0,r0
00012c  0400              LSLS     r0,r0,#16
00012e  0c00              LSRS     r0,r0,#16
;;;207    }
000130  e7ad              B        |L1.142|
;;;208    
                          ENDP

                  init_emac PROC
;;;211    //*****************************************************//
;;;212    void init_emac(void)  {
000132  b5f0              PUSH     {r4-r7,lr}
;;;213      unsigned int regv,tout,id1,id2,i;
;;;214    
;;;215      synchro = false;
000134  49af              LDR      r1,|L1.1012|
000136  2000              MOVS     r0,#0
000138  7008              STRB     r0,[r1,#0]
;;;216    
;;;217    #if ETHERNET_DEBUG
;;;218      UART_init(57600);
;;;219      print("Ethernet Secondary Bootloader: Target in debug mode\n");
;;;220    #endif 
;;;221    
;;;222       /* Power Up the EMAC controller. */
;;;223      PCONP |= 0x40000000;
00013a  49b1              LDR      r1,|L1.1024|
00013c  6848              LDR      r0,[r1,#4]
00013e  2201              MOVS     r2,#1
000140  0792              LSLS     r2,r2,#30
000142  4310              ORRS     r0,r0,r2
000144  6048              STR      r0,[r1,#4]
;;;224      
;;;225      /* Enable P1 Ethernet Pins. */
;;;226      if (MAC_MODULEID == OLD_EMAC_MODULE_ID) { 
000146  48af              LDR      r0,|L1.1028|
000148  6bc1              LDR      r1,[r0,#0x3c]
00014a  4aaf              LDR      r2,|L1.1032|
;;;227        /* For the first silicon rev.'-' ID P1.6 should be set. */
;;;228        PINSEL2 = 0x50151105;
00014c  48af              LDR      r0,|L1.1036|
00014e  4291              CMP      r1,r2                 ;226
000150  d101              BNE      |L1.342|
000152  49af              LDR      r1,|L1.1040|
000154  e000              B        |L1.344|
                  |L1.342|
;;;229      }
;;;230      else {
;;;231        /* on rev. 'A' and later, P1.6 should NOT be set. */
;;;232        PINSEL2 = 0x50150105;
000156  49af              LDR      r1,|L1.1044|
                  |L1.344|
000158  6081              STR      r1,[r0,#8]
;;;233      }
;;;234      PINSEL3 = (PINSEL3 & ~0x0000000F) | 0x00000005;
00015a  68c1              LDR      r1,[r0,#0xc]
00015c  0909              LSRS     r1,r1,#4
00015e  0109              LSLS     r1,r1,#4
000160  1d49              ADDS     r1,r1,#5
000162  60c1              STR      r1,[r0,#0xc]
;;;235     
;;;236      /* Reset all EMAC internal modules. */
;;;237      MAC_MAC1 = MAC1_RES_TX | MAC1_RES_MCS_TX | MAC1_RES_RX | MAC1_RES_MCS_RX |
000164  4ca2              LDR      r4,|L1.1008|
000166  20cf              MOVS     r0,#0xcf
000168  0200              LSLS     r0,r0,#8
00016a  6020              STR      r0,[r4,#0]
;;;238                 MAC1_SIM_RES | MAC1_SOFT_RES;
;;;239      MAC_COMMAND = CR_REG_RES | CR_TX_RES | CR_RX_RES;
00016c  48aa              LDR      r0,|L1.1048|
00016e  2138              MOVS     r1,#0x38
000170  6001              STR      r1,[r0,#0]
;;;240    
;;;241      /* A short delay after reset. */
;;;242      for (tout = 100; tout; tout--);
000172  2564              MOVS     r5,#0x64
                  |L1.372|
000174  1e6d              SUBS     r5,r5,#1
000176  d1fd              BNE      |L1.372|
;;;243    
;;;244      /* Initialize MAC control registers. */
;;;245      MAC_MAC1 = MAC1_PASS_ALL;
000178  2102              MOVS     r1,#2
00017a  6021              STR      r1,[r4,#0]
;;;246      MAC_MAC2 = MAC2_CRC_EN | MAC2_PAD_EN;
00017c  2130              MOVS     r1,#0x30
00017e  6061              STR      r1,[r4,#4]
;;;247      MAC_MAXF = ETH_MAX_FLEN;
000180  49a6              LDR      r1,|L1.1052|
000182  6161              STR      r1,[r4,#0x14]
;;;248      MAC_CLRT = CLRT_DEF;
000184  49a6              LDR      r1,|L1.1056|
000186  6121              STR      r1,[r4,#0x10]
;;;249      MAC_IPGR = IPGR_DEF;
000188  2612              MOVS     r6,#0x12
00018a  60e6              STR      r6,[r4,#0xc]
;;;250    
;;;251      /* Enable Reduced MII interface. */
;;;252      MAC_COMMAND = CR_RMII | CR_PASS_RUNT_FRM;
00018c  48a2              LDR      r0,|L1.1048|
00018e  0171              LSLS     r1,r6,#5
000190  6001              STR      r1,[r0,#0]
;;;253    
;;;254      /* Put the PHY chip in reset mode */
;;;255      write_PHY (PHY_REG_BMCR, 0x8000);
000192  2101              MOVS     r1,#1
000194  03c9              LSLS     r1,r1,#15
000196  2000              MOVS     r0,#0
000198  f7fffffe          BL       write_PHY
;;;256    
;;;257      /* Wait for hardware reset to end. */
;;;258      for (tout = 0; tout < 0x100000; tout++) {
00019c  2701              MOVS     r7,#1
00019e  053f              LSLS     r7,r7,#20
                  |L1.416|
;;;259        regv = read_PHY (PHY_REG_BMCR);
0001a0  2000              MOVS     r0,#0
0001a2  f7fffffe          BL       read_PHY
;;;260        if (!(regv & 0x8000)) {
0001a6  0400              LSLS     r0,r0,#16
0001a8  d502              BPL      |L1.432|
0001aa  1c6d              ADDS     r5,r5,#1              ;258
0001ac  42bd              CMP      r5,r7                 ;258
0001ae  d3f7              BCC      |L1.416|
                  |L1.432|
;;;261          /* Reset complete */
;;;262          break;
;;;263        }
;;;264      }
;;;265     
;;;266      /* MII Mgmt Configuration register and MII Mgnt hardware Reset       */
;;;267      /* host clock divided by 20, no suppress preamble, no scan increment */
;;;268      MAC_MCFG = HOST_CLK_BY_20 | MCFG_RES_MII;	
0001b0  489c              LDR      r0,|L1.1060|
0001b2  6220              STR      r0,[r4,#0x20]
;;;269      for ( i = 0; i < 0x40; i++ );
0001b4  2000              MOVS     r0,#0
                  |L1.438|
0001b6  1c40              ADDS     r0,r0,#1
0001b8  2840              CMP      r0,#0x40
0001ba  d3fc              BCC      |L1.438|
;;;270      MAC_MCFG &= (~MCFG_RES_MII);	/* Clear the reset */
0001bc  6a20              LDR      r0,[r4,#0x20]
0001be  2101              MOVS     r1,#1
0001c0  03c9              LSLS     r1,r1,#15
0001c2  4388              BICS     r0,r0,r1
0001c4  6220              STR      r0,[r4,#0x20]
;;;271      MAC_MCMD = 0;	
0001c6  2000              MOVS     r0,#0
0001c8  6260              STR      r0,[r4,#0x24]
;;;272    
;;;273    #if(PHY_CHIP==0)  //National PHY
;;;274      /* Check if this is a DP83848C PHY. */
;;;275      id1 = read_PHY (PHY_REG_IDR1);
0001ca  2002              MOVS     r0,#2
0001cc  f7fffffe          BL       read_PHY
0001d0  0005              MOVS     r5,r0
;;;276      id2 = read_PHY (PHY_REG_IDR2);
0001d2  2003              MOVS     r0,#3
0001d4  f7fffffe          BL       read_PHY
;;;277      if (((id1 << 16) | (id2 & 0xFFF0)) == DP83848C_ID) {
0001d8  4a88              LDR      r2,|L1.1020|
0001da  0429              LSLS     r1,r5,#16
0001dc  3a0e              SUBS     r2,r2,#0xe
0001de  4010              ANDS     r0,r0,r2
0001e0  4301              ORRS     r1,r1,r0
0001e2  4891              LDR      r0,|L1.1064|
0001e4  4281              CMP      r1,r0
0001e6  d10d              BNE      |L1.516|
;;;278        /* Configure the PHY device */
;;;279    
;;;280        /* Use autonegotiation about the link speed. */
;;;281        write_PHY (PHY_REG_BMCR, PHY_AUTO_NEG);
0001e8  2103              MOVS     r1,#3
0001ea  0309              LSLS     r1,r1,#12
0001ec  2000              MOVS     r0,#0
0001ee  f7fffffe          BL       write_PHY
;;;282        /* Wait to complete Auto_Negotiation. */
;;;283        for (tout = 0; tout < 0x100000; tout++) {
0001f2  2500              MOVS     r5,#0
                  |L1.500|
;;;284          regv = read_PHY (PHY_REG_BMSR);
0001f4  2001              MOVS     r0,#1
0001f6  f7fffffe          BL       read_PHY
;;;285          if (regv & 0x0020) {
0001fa  0680              LSLS     r0,r0,#26
0001fc  d402              BMI      |L1.516|
0001fe  1c6d              ADDS     r5,r5,#1              ;283
000200  42bd              CMP      r5,r7                 ;283
000202  d3f7              BCC      |L1.500|
                  |L1.516|
;;;286            /* Autonegotiation Complete. */
;;;287            break;
;;;288          }
;;;289        }
;;;290      }
;;;291      
;;;292      /* Check the link status. */
;;;293      for (tout = 0; tout < 0x10000; tout++) {
000204  2500              MOVS     r5,#0
000206  2701              MOVS     r7,#1
000208  043f              LSLS     r7,r7,#16
                  |L1.522|
;;;294        regv = read_PHY (PHY_REG_STS);
00020a  2010              MOVS     r0,#0x10
00020c  f7fffffe          BL       read_PHY
;;;295        if (regv & 0x0001) {
000210  07c1              LSLS     r1,r0,#31
000212  d102              BNE      |L1.538|
000214  1c6d              ADDS     r5,r5,#1              ;293
000216  42bd              CMP      r5,r7                 ;293
000218  d3f7              BCC      |L1.522|
                  |L1.538|
;;;296          /* Link is on. */
;;;297          break;
;;;298        }
;;;299      }
;;;300    
;;;301      /* Configure Full/Half Duplex mode. */
;;;302      if (regv & 0x0004) {
00021a  0741              LSLS     r1,r0,#29
00021c  d50c              BPL      |L1.568|
;;;303        /* Full duplex is enabled. */
;;;304        MAC_MAC2    |= MAC2_FULL_DUP;
00021e  6861              LDR      r1,[r4,#4]
000220  2201              MOVS     r2,#1
000222  4311              ORRS     r1,r1,r2
000224  6061              STR      r1,[r4,#4]
;;;305        MAC_COMMAND |= CR_FULL_DUP;
000226  497c              LDR      r1,|L1.1048|
000228  680a              LDR      r2,[r1,#0]
00022a  2301              MOVS     r3,#1
00022c  029b              LSLS     r3,r3,#10
00022e  431a              ORRS     r2,r2,r3
000230  600a              STR      r2,[r1,#0]
;;;306        MAC_IPGT     = IPGT_FULL_DUP;
000232  2115              MOVS     r1,#0x15
000234  60a1              STR      r1,[r4,#8]
000236  e000              B        |L1.570|
                  |L1.568|
;;;307      }
;;;308      else {
;;;309        /* Half duplex mode. */
;;;310        MAC_IPGT = IPGT_HALF_DUP;
000238  60a6              STR      r6,[r4,#8]
                  |L1.570|
;;;311      }
;;;312    
;;;313      /* Configure 100MBit/10MBit mode. */
;;;314      if (regv & 0x0002) {
00023a  0780              LSLS     r0,r0,#30
00023c  d501              BPL      |L1.578|
;;;315        /* 10MBit mode. */
;;;316        MAC_SUPP = 0;
00023e  2000              MOVS     r0,#0
000240  e001              B        |L1.582|
                  |L1.578|
;;;317      }
;;;318      else {
;;;319        /* 100MBit mode. */
;;;320        MAC_SUPP = SUPP_SPEED;
000242  20ff              MOVS     r0,#0xff
000244  3001              ADDS     r0,#1
                  |L1.582|
000246  61a0              STR      r0,[r4,#0x18]
;;;321      }
;;;322    #endif
;;;323    
;;;324    #if(PHY_CHIP==1)  //Other PHY
;;;325      /* Initialization code for other PHY */
;;;326    
;;;327    
;;;328    #endif
;;;329    
;;;330      /* Set the Ethernet MAC Address registers */
;;;331      MAC_SA0 = (MYMAC_1 << 8) | MYMAC_2;
000248  4869              LDR      r0,|L1.1008|
00024a  4978              LDR      r1,|L1.1068|
00024c  3040              ADDS     r0,r0,#0x40
00024e  6001              STR      r1,[r0,#0]
;;;332      MAC_SA1 = (MYMAC_3 << 8) | MYMAC_4;
000250  4977              LDR      r1,|L1.1072|
000252  6041              STR      r1,[r0,#4]
;;;333      MAC_SA2 = (MYMAC_5 << 8) | MYMAC_6;
000254  4977              LDR      r1,|L1.1076|
000256  6081              STR      r1,[r0,#8]
;;;334    
;;;335      /* save the Ethernet MAC Address to MyMAC[] */
;;;336      MyMAC[0] = MYMAC_6;
000258  4866              LDR      r0,|L1.1012|
00025a  210c              MOVS     r1,#0xc
00025c  3014              ADDS     r0,r0,#0x14
00025e  7001              STRB     r1,[r0,#0]
;;;337      MyMAC[1] = MYMAC_5;
000260  211d              MOVS     r1,#0x1d
000262  7041              STRB     r1,[r0,#1]
;;;338      MyMAC[2] = MYMAC_4;
;;;339      MyMAC[3] = MYMAC_3;
000264  21e0              MOVS     r1,#0xe0
000266  7086              STRB     r6,[r0,#2]            ;338
000268  70c1              STRB     r1,[r0,#3]
;;;340      MyMAC[4] = MYMAC_2;
00026a  211f              MOVS     r1,#0x1f
00026c  7101              STRB     r1,[r0,#4]
;;;341      MyMAC[5] = MYMAC_1;
;;;342    
;;;343      /* Initialize Rx DMA Descriptors */
;;;344      for (i = 0; i < NUM_RX_FRAG; i++) {
;;;345        RX_DESC_PACKET(i)  = RX_BUF(i);
;;;346        RX_DESC_CTRL(i)    = RCTRL_INT | (ETH_FRAG_SIZE-1);
;;;347        RX_STAT_INFO(i)    = 0;
00026e  4f72              LDR      r7,|L1.1080|
000270  2110              MOVS     r1,#0x10              ;341
000272  7141              STRB     r1,[r0,#5]            ;341
000274  4b70              LDR      r3,|L1.1080|
000276  2000              MOVS     r0,#0                 ;344
000278  37c0              ADDS     r7,r7,#0xc0
00027a  0005              MOVS     r5,r0                 ;215
                  |L1.636|
00027c  2178              MOVS     r1,#0x78              ;345
00027e  4341              MULS     r1,r0,r1              ;345
000280  4a6e              LDR      r2,|L1.1084|
000282  188e              ADDS     r6,r1,r2              ;345
000284  00c1              LSLS     r1,r0,#3              ;345
000286  18ca              ADDS     r2,r1,r3              ;345
000288  6016              STR      r6,[r2,#0]            ;346
00028a  4e6d              LDR      r6,|L1.1088|
00028c  19c9              ADDS     r1,r1,r7
00028e  6056              STR      r6,[r2,#4]
000290  1c40              ADDS     r0,r0,#1              ;344
;;;348        RX_STAT_HASHCRC(i) = 0;
000292  608d              STR      r5,[r1,#8]
000294  2819              CMP      r0,#0x19              ;344
000296  60cd              STR      r5,[r1,#0xc]          ;344
000298  d3f0              BCC      |L1.636|
;;;349      }
;;;350      /* Set EMAC Receive Descriptor Registers. */
;;;351      MAC_RXDESCRIPTOR    = RX_DESC_BASE;
00029a  4e5f              LDR      r6,|L1.1048|
00029c  60b3              STR      r3,[r6,#8]
;;;352      MAC_RXSTATUS        = RX_STAT_BASE;
00029e  4866              LDR      r0,|L1.1080|
0002a0  30c8              ADDS     r0,r0,#0xc8
0002a2  60f0              STR      r0,[r6,#0xc]
;;;353      MAC_RXDESCRIPTORNUM = NUM_RX_FRAG-1;
0002a4  2018              MOVS     r0,#0x18
0002a6  6130              STR      r0,[r6,#0x10]
;;;354      /* Rx Descriptors Point to 0 */
;;;355      MAC_RXCONSUMEINDEX  = 0;
0002a8  61b5              STR      r5,[r6,#0x18]
;;;356    
;;;357      /* Initialize Tx DMA Descriptors */
;;;358      for (i = 0; i < NUM_TX_FRAG; i++) {
;;;359        TX_DESC_PACKET(i) = TX_BUF(i);
0002aa  4b64              LDR      r3,|L1.1084|
0002ac  4f65              LDR      r7,|L1.1092|
0002ae  2000              MOVS     r0,#0                 ;358
0002b0  3b34              SUBS     r3,r3,#0x34
                  |L1.690|
0002b2  2178              MOVS     r1,#0x78
0002b4  4341              MULS     r1,r0,r1
0002b6  19ca              ADDS     r2,r1,r7
0002b8  00c1              LSLS     r1,r0,#3
0002ba  18c9              ADDS     r1,r1,r3
;;;360        TX_DESC_CTRL(i)   = 0;
0002bc  3110              ADDS     r1,r1,#0x10
0002be  c124              STM      r1!,{r2,r5}
0002c0  0081              LSLS     r1,r0,#2
;;;361        TX_STAT_INFO(i)   = 0;
0002c2  18c9              ADDS     r1,r1,r3
0002c4  1c40              ADDS     r0,r0,#1              ;358
0002c6  2803              CMP      r0,#3                 ;358
0002c8  628d              STR      r5,[r1,#0x28]         ;358
0002ca  d3f2              BCC      |L1.690|
;;;362      }
;;;363      /* Set EMAC Transmit Descriptor Registers. */
;;;364      MAC_TXDESCRIPTOR    = TX_DESC_BASE;
0002cc  485b              LDR      r0,|L1.1084|
0002ce  3824              SUBS     r0,r0,#0x24
0002d0  61f0              STR      r0,[r6,#0x1c]
;;;365      MAC_TXSTATUS        = TX_STAT_BASE;
0002d2  485a              LDR      r0,|L1.1084|
0002d4  380c              SUBS     r0,r0,#0xc
0002d6  6230              STR      r0,[r6,#0x20]
;;;366      MAC_TXDESCRIPTORNUM = NUM_TX_FRAG-1;
0002d8  2002              MOVS     r0,#2
0002da  6270              STR      r0,[r6,#0x24]
;;;367      /* Tx Descriptors Point to 0 */
;;;368      MAC_TXPRODUCEINDEX  = 0;
0002dc  62b5              STR      r5,[r6,#0x28]
;;;369    
;;;370      /* Receive Broadcast and Perfect Match Packets */
;;;371      MAC_RXFILTERCTRL = RFC_PERFECT_EN;  
0002de  485a              LDR      r0,|L1.1096|
0002e0  2120              MOVS     r1,#0x20
0002e2  6001              STR      r1,[r0,#0]
;;;372    
;;;373      /* Enable EMAC interrupts. */
;;;374      MAC_INTENABLE = INT_RX_DONE | INT_TX_DONE;
0002e4  4847              LDR      r0,|L1.1028|
0002e6  2188              MOVS     r1,#0x88
0002e8  6241              STR      r1,[r0,#0x24]
;;;375    
;;;376      /* Reset all interrupts */
;;;377      MAC_INTCLEAR  = 0xFFFF;
0002ea  4944              LDR      r1,|L1.1020|
0002ec  1c49              ADDS     r1,r1,#1
0002ee  6281              STR      r1,[r0,#0x28]
;;;378    
;;;379      /* Enable receive and transmit mode of MAC Ethernet core */
;;;380      MAC_COMMAND  |= (CR_RX_EN | CR_TX_EN);
0002f0  6830              LDR      r0,[r6,#0]
0002f2  2103              MOVS     r1,#3
0002f4  4308              ORRS     r0,r0,r1
0002f6  6030              STR      r0,[r6,#0]
;;;381      MAC_MAC1     |= MAC1_REC_EN;
0002f8  6820              LDR      r0,[r4,#0]
0002fa  2101              MOVS     r1,#1
0002fc  4308              ORRS     r0,r0,r1
0002fe  6020              STR      r0,[r4,#0]
;;;382    
;;;383      /* Complete some IP & UDP header values */
;;;384      txbuffer[12] = 0x08;
000300  483d              LDR      r0,|L1.1016|
000302  2108              MOVS     r1,#8
000304  3078              ADDS     r0,r0,#0x78
000306  7301              STRB     r1,[r0,#0xc]
;;;385      txbuffer[13] = 0x00;
;;;386      txbuffer[14] = 0x45;
000308  2145              MOVS     r1,#0x45
00030a  7345              STRB     r5,[r0,#0xd]          ;385
00030c  7381              STRB     r1,[r0,#0xe]
;;;387      txbuffer[15] = 0x00;
;;;388      txbuffer[18] = 0xD8;
00030e  21d8              MOVS     r1,#0xd8
000310  73c5              STRB     r5,[r0,#0xf]          ;387
000312  7481              STRB     r1,[r0,#0x12]
;;;389      txbuffer[19] = 0xF4;
000314  21f4              MOVS     r1,#0xf4
000316  74c1              STRB     r1,[r0,#0x13]
;;;390      txbuffer[20] = 0x00;
000318  7505              STRB     r5,[r0,#0x14]
;;;391      txbuffer[21] = 0x00;
;;;392      txbuffer[22] = 0x80;
00031a  2180              MOVS     r1,#0x80
00031c  7545              STRB     r5,[r0,#0x15]         ;391
00031e  7581              STRB     r1,[r0,#0x16]
;;;393      txbuffer[23] = 0x11;
000320  2111              MOVS     r1,#0x11
000322  75c1              STRB     r1,[r0,#0x17]
;;;394    }
000324  bcf0              POP      {r4-r7}
000326  bc08              POP      {r3}
000328  4718              BX       r3
;;;395    
                          ENDP

                  emac_getline PROC
;;;397    // returns 0 if packet received, 1 if timeout
;;;398    unsigned emac_getline(char * buf,int max_len,int * count) {
00032a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;399      unsigned short RxLen;
;;;400      unsigned int idx, i;
;;;401    
;;;402    #if ETHERNET_DEBUG
;;;403      int j;
;;;404    #endif
;;;405    
;;;406    #if LED_ENABLED
;;;407      int k=0;
00032c  2400              MOVS     r4,#0
;;;408    #endif
;;;409     
;;;410      /* get timestamp for end of timeout period */
;;;411      ethernet_timeout = Timer_GetTimestamp() + ETHERNET_TIMEOUT;
00032e  f7fffffe          BL       Timer_GetTimestamp
000332  4946              LDR      r1,|L1.1100|
;;;412    
;;;413      /* Check for Received frames */
;;;414      while(1){
;;;415        while(MAC_RXCONSUMEINDEX == MAC_RXPRODUCEINDEX){
000334  4f38              LDR      r7,|L1.1048|
000336  1841              ADDS     r1,r0,r1              ;411
000338  482e              LDR      r0,|L1.1012|
;;;416    #if LED_ENABLED
;;;417          /* increment the counter and check timeout  */
;;;418    	  if (k++ > 200000) {
;;;419    	     k=0;
;;;420    		 /* toogle the LED           */
;;;421    	     if (FIO2PIN & (1<<PORT2_PIN))
;;;422    	       FIO2CLR |= (1<<PORT2_PIN);
;;;423    	     else
;;;424    	       FIO2SET |= (1<<PORT2_PIN);
;;;425    	  }
;;;426    #endif
;;;427    
;;;428    	  /* no filtered packets received during timeout period */
;;;429          if (Timer_HasTimestampExpired(ethernet_timeout))
;;;430    	  {
;;;431    #if ETHERNET_DEBUG
;;;432            print("Timed out - going back to looking for handshake\n");
;;;433    #endif
;;;434    	    return 1;
00033a  6101              STR      r1,[r0,#0x10]  ; ethernet_timeout
00033c  e01c              B        |L1.888|
                  |L1.830|
00033e  4944              LDR      r1,|L1.1104|
000340  0020              MOVS     r0,r4                 ;418
000342  1c64              ADDS     r4,r4,#1              ;418
000344  4288              CMP      r0,r1                 ;418
000346  dd0d              BLE      |L1.868|
000348  4842              LDR      r0,|L1.1108|
00034a  2400              MOVS     r4,#0                 ;419
00034c  6941              LDR      r1,[r0,#0x14]         ;421
00034e  0609              LSLS     r1,r1,#24             ;421
000350  d504              BPL      |L1.860|
000352  69c1              LDR      r1,[r0,#0x1c]         ;422
000354  2280              MOVS     r2,#0x80              ;422
000356  4311              ORRS     r1,r1,r2              ;422
000358  61c1              STR      r1,[r0,#0x1c]         ;422
00035a  e003              B        |L1.868|
                  |L1.860|
00035c  6981              LDR      r1,[r0,#0x18]         ;424
00035e  2280              MOVS     r2,#0x80              ;424
000360  4311              ORRS     r1,r1,r2              ;424
000362  6181              STR      r1,[r0,#0x18]         ;424
                  |L1.868|
000364  4823              LDR      r0,|L1.1012|
000366  6900              LDR      r0,[r0,#0x10]         ;429  ; ethernet_timeout
000368  f7fffffe          BL       Timer_HasTimestampExpired
00036c  2800              CMP      r0,#0                 ;429
00036e  d003              BEQ      |L1.888|
000370  2001              MOVS     r0,#1
                  |L1.882|
;;;435    	  }
;;;436        }
;;;437    
;;;438        idx = MAC_RXCONSUMEINDEX;
;;;439    
;;;440        /* check for crc error */
;;;441    	if (RX_STAT_INFO(idx) & RINFO_CRC_ERR)
;;;442    	{
;;;443    #if ETHERNET_DEBUG
;;;444          print("Rx CRC error\n");
;;;445    #endif
;;;446          /* ignore frame */
;;;447          if (++idx == NUM_RX_FRAG)
;;;448      	  idx = 0;   
;;;449    	  MAC_RXCONSUMEINDEX = idx;
;;;450          continue;
;;;451    	}
;;;452    
;;;453        /* Get the Length and a pointer to the data  */
;;;454        RxLen = (RX_STAT_INFO(idx) & RINFO_SIZE) - 3;				 
;;;455        rxptr = (unsigned short *)RX_DESC_PACKET(idx);
;;;456        CopyFromFrame_EMAC(rxbuffer, RxLen);
;;;457        if (++idx == NUM_RX_FRAG)
;;;458    	  idx = 0;   
;;;459    	MAC_RXCONSUMEINDEX = idx;
;;;460        if(filter_pass())
;;;461          break;
;;;462      } 
;;;463      /* limit incoming data for protection  */
;;;464      if ((RxLen-42) > max_len)
;;;465        RxLen = max_len + 42;
;;;466      memcpy(buf,PAYLOADr->data,RxLen-42);
;;;467    
;;;468      /* detect '0x0A' (string terminator) and replace it by CR+LF  */
;;;469      for(i=0;i<max_len;i++) {
;;;470        if(buf[i]==CR){
;;;471    	  buf[i]='\0';
;;;472    	  break;
;;;473    	}
;;;474      }
;;;475      (*count) = i;
;;;476    
;;;477    #if ETHERNET_DEBUG
;;;478      /* print received command   */
;;;479      print("Rx:  ");
;;;480      if (RxLen > 60) {
;;;481    	print("...Data...");
;;;482      }else{
;;;483        j=0;
;;;484        for(i=0; i<(*count); i++) {
;;;485    	  printascii(buf[i]);
;;;486          j++;
;;;487          if (j==16) {
;;;488            j=0;
;;;489            print("\r\n     ");
;;;490          }
;;;491        }
;;;492      }
;;;493      print("\r\n-------------------\r\n");
;;;494    #endif
;;;495    
;;;496        // reset timestamp for end of timeout period
;;;497        ethernet_timeout = Timer_GetTimestamp() + ETHERNET_TIMEOUT;
;;;498    
;;;499        return (0);
;;;500    }
000372  bcfe              POP      {r1-r7}
000374  bc08              POP      {r3}
000376  4718              BX       r3
                  |L1.888|
000378  69b8              LDR      r0,[r7,#0x18]         ;415
00037a  6979              LDR      r1,[r7,#0x14]         ;415
00037c  4288              CMP      r0,r1                 ;415
00037e  d0de              BEQ      |L1.830|
000380  69bd              LDR      r5,[r7,#0x18]         ;438
000382  492d              LDR      r1,|L1.1080|
000384  00e8              LSLS     r0,r5,#3              ;438
000386  31c0              ADDS     r1,r1,#0xc0           ;441
000388  1841              ADDS     r1,r0,r1              ;441
00038a  6889              LDR      r1,[r1,#8]            ;441
00038c  020a              LSLS     r2,r1,#8              ;441
00038e  d505              BPL      |L1.924|
000390  1c6d              ADDS     r5,r5,#1              ;447
000392  2d19              CMP      r5,#0x19              ;447
000394  d100              BNE      |L1.920|
000396  2500              MOVS     r5,#0                 ;448
                  |L1.920|
000398  61bd              STR      r5,[r7,#0x18]         ;449
00039a  e7ed              B        |L1.888|
                  |L1.924|
00039c  0549              LSLS     r1,r1,#21             ;454
00039e  0d49              LSRS     r1,r1,#21             ;454
0003a0  1ec9              SUBS     r1,r1,#3              ;454
0003a2  040e              LSLS     r6,r1,#16             ;454
0003a4  4924              LDR      r1,|L1.1080|
0003a6  0c36              LSRS     r6,r6,#16             ;454
0003a8  1840              ADDS     r0,r0,r1              ;455
0003aa  6800              LDR      r0,[r0,#0]            ;455
0003ac  4911              LDR      r1,|L1.1012|
0003ae  6088              STR      r0,[r1,#8]            ;456  ; rxptr
0003b0  4811              LDR      r0,|L1.1016|
0003b2  0031              MOVS     r1,r6                 ;456
0003b4  f7fffffe          BL       CopyFromFrame_EMAC
0003b8  1c6d              ADDS     r5,r5,#1              ;457
0003ba  2d19              CMP      r5,#0x19              ;457
0003bc  d100              BNE      |L1.960|
0003be  2500              MOVS     r5,#0                 ;458
                  |L1.960|
0003c0  61bd              STR      r5,[r7,#0x18]         ;459
0003c2  f7fffffe          BL       filter_pass
0003c6  2800              CMP      r0,#0                 ;460
0003c8  d0d6              BEQ      |L1.888|
0003ca  9901              LDR      r1,[sp,#4]            ;464
0003cc  0030              MOVS     r0,r6                 ;464
0003ce  382a              SUBS     r0,r0,#0x2a           ;464
0003d0  4288              CMP      r0,r1                 ;464
0003d2  dd03              BLE      |L1.988|
0003d4  0008              MOVS     r0,r1                 ;465
0003d6  302a              ADDS     r0,r0,#0x2a           ;465
0003d8  0406              LSLS     r6,r0,#16             ;465
0003da  0c36              LSRS     r6,r6,#16             ;465
                  |L1.988|
0003dc  4906              LDR      r1,|L1.1016|
0003de  0032              MOVS     r2,r6                 ;466
0003e0  9800              LDR      r0,[sp,#0]            ;466
0003e2  3a2a              SUBS     r2,r2,#0x2a           ;466
0003e4  312a              ADDS     r1,r1,#0x2a           ;466
0003e6  f7fffffe          BL       __aeabi_memcpy
0003ea  2000              MOVS     r0,#0                 ;469
0003ec  e03d              B        |L1.1130|
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      0xffe00000
                  |L1.1012|
                          DCD      ||.data||
                  |L1.1016|
                          DCD      ||.bss||
                  |L1.1020|
                          DCD      0x0000fffe
                  |L1.1024|
                          DCD      0xe01fc0c0
                  |L1.1028|
                          DCD      0xffe00fc0
                  |L1.1032|
                          DCD      0x39022000
                  |L1.1036|
                          DCD      0xe002c000
                  |L1.1040|
                          DCD      0x50151105
                  |L1.1044|
                          DCD      0x50150105
                  |L1.1048|
                          DCD      0xffe00100
                  |L1.1052|
                          DCD      0x000005f2
                  |L1.1056|
                          DCD      0x0000370f
                  |L1.1060|
                          DCD      0x00008018
                  |L1.1064|
                          DCD      0x20005c90
                  |L1.1068|
                          DCD      0x0000101f
                  |L1.1072|
                          DCD      0x0000e012
                  |L1.1076|
                          DCD      0x00001d0c
                  |L1.1080|
                          DCD      0x7fe00000
                  |L1.1084|
                          DCD      0x7fe001b4
                  |L1.1088|
                          DCD      0x80000077
                  |L1.1092|
                          DCD      0x7fe00d6c
                  |L1.1096|
                          DCD      0xffe00200
                  |L1.1100|
                          DCD      0x0000ea60
                  |L1.1104|
                          DCD      0x00030d40
                  |L1.1108|
                          DCD      0x3fffc040
                  |L1.1112|
000458  9900              LDR      r1,[sp,#0]            ;470
00045a  5c09              LDRB     r1,[r1,r0]            ;470
00045c  290d              CMP      r1,#0xd               ;470
00045e  d103              BNE      |L1.1128|
000460  9900              LDR      r1,[sp,#0]            ;471
000462  2200              MOVS     r2,#0                 ;471
000464  540a              STRB     r2,[r1,r0]            ;471
000466  e003              B        |L1.1136|
                  |L1.1128|
000468  1c40              ADDS     r0,r0,#1              ;469
                  |L1.1130|
00046a  9901              LDR      r1,[sp,#4]            ;469
00046c  4288              CMP      r0,r1                 ;469
00046e  d3f3              BCC      |L1.1112|
                  |L1.1136|
000470  9902              LDR      r1,[sp,#8]            ;475
000472  6008              STR      r0,[r1,#0]            ;497
000474  f7fffffe          BL       Timer_GetTimestamp
000478  4957              LDR      r1,|L1.1496|
00047a  1841              ADDS     r1,r0,r1              ;497
00047c  4857              LDR      r0,|L1.1500|
00047e  6101              STR      r1,[r0,#0x10]         ;499  ; ethernet_timeout
000480  2000              MOVS     r0,#0                 ;499
000482  e776              B        |L1.882|
;;;501    
                          ENDP

                  emac_sendline_crlf PROC
;;;502    unsigned emac_sendline_crlf(char * buf) {  
000484  b5f8              PUSH     {r3-r7,lr}
;;;503      int i;
;;;504      unsigned int idx;
;;;505    
;;;506    #if ETHERNET_DEBUG
;;;507      int j;
;;;508    #endif
;;;509    
;;;510      /* detect '\0' (string terminator) and replace it by CR+LF  */
;;;511      for(i=0;i<CMD_SIZE;i++) {
;;;512        PAYLOADt->data[i] = buf[i] ;			
000486  4c56              LDR      r4,|L1.1504|
000488  2100              MOVS     r1,#0                 ;511
                  |L1.1162|
00048a  5c43              LDRB     r3,[r0,r1]
00048c  1862              ADDS     r2,r4,r1
00048e  3220              ADDS     r2,r2,#0x20
000490  7293              STRB     r3,[r2,#0xa]
;;;513        if(buf[i]=='\0'){
000492  5c42              LDRB     r2,[r0,r1]
000494  2a00              CMP      r2,#0
000496  d106              BNE      |L1.1190|
;;;514    	  PAYLOADt->data[i]=CR;
000498  1860              ADDS     r0,r4,r1
00049a  220d              MOVS     r2,#0xd
00049c  3020              ADDS     r0,r0,#0x20
00049e  7282              STRB     r2,[r0,#0xa]
;;;515    	  PAYLOADt->data[i+1]=LF;
0004a0  220a              MOVS     r2,#0xa
0004a2  72c2              STRB     r2,[r0,#0xb]
;;;516    	  break;
0004a4  e002              B        |L1.1196|
                  |L1.1190|
0004a6  1c49              ADDS     r1,r1,#1              ;511
0004a8  2946              CMP      r1,#0x46              ;511
0004aa  dbee              BLT      |L1.1162|
                  |L1.1196|
;;;517    	}
;;;518      }
;;;519      data_size = i+2;
0004ac  1c89              ADDS     r1,r1,#2
0004ae  484b              LDR      r0,|L1.1500|
0004b0  040f              LSLS     r7,r1,#16
0004b2  0c3f              LSRS     r7,r7,#16
0004b4  8047              STRH     r7,[r0,#2]
;;;520    
;;;521    #if ETHERNET_DEBUG
;;;522      print("Tx:  ");
;;;523      j=0;
;;;524      for(i=0; i<data_size-2; i++) {
;;;525    	printascii(buf[i]);
;;;526        j++;
;;;527        if (j==16) {
;;;528          j=0;
;;;529          print("\r\n     ");
;;;530        }
;;;531      }
;;;532      print("\r\n-------------------\r\n");
;;;533    #endif
;;;534        
;;;535      idx  = MAC_TXPRODUCEINDEX;
0004b6  484b              LDR      r0,|L1.1508|
0004b8  6a85              LDR      r5,[r0,#0x28]
;;;536      txptr = (unsigned short *)TX_DESC_PACKET(idx);
0004ba  484b              LDR      r0,|L1.1512|
0004bc  00e9              LSLS     r1,r5,#3              ;535
0004be  1808              ADDS     r0,r1,r0
0004c0  4a46              LDR      r2,|L1.1500|
0004c2  6901              LDR      r1,[r0,#0x10]
;;;537      TX_DESC_CTRL(idx) = FrameSize | TCTRL_LAST;
;;;538      memcpy(FRAMEt->destination,FRAMEr->source,6);
0004c4  4e46              LDR      r6,|L1.1504|
0004c6  60d1              STR      r1,[r2,#0xc]          ;537  ; txptr
0004c8  4948              LDR      r1,|L1.1516|
0004ca  3e78              SUBS     r6,r6,#0x78
0004cc  1879              ADDS     r1,r7,r1              ;537
0004ce  6141              STR      r1,[r0,#0x14]
0004d0  4843              LDR      r0,|L1.1504|
0004d2  2206              MOVS     r2,#6
0004d4  1db1              ADDS     r1,r6,#6
0004d6  f7fffffe          BL       __aeabi_memcpy
;;;539      memcpy(FRAMEt->source,MyMAC,6);
0004da  4940              LDR      r1,|L1.1500|
0004dc  2206              MOVS     r2,#6
0004de  3114              ADDS     r1,r1,#0x14
0004e0  1da0              ADDS     r0,r4,#6
0004e2  f7fffffe          BL       __aeabi_memcpy
;;;540      PACKETt->iplen = HTONS(FrameSize - EtherHdrLen);
0004e6  371c              ADDS     r7,r7,#0x1c
0004e8  0439              LSLS     r1,r7,#16
0004ea  0238              LSLS     r0,r7,#8
0004ec  0e09              LSRS     r1,r1,#24
0004ee  4308              ORRS     r0,r0,r1
;;;541      memcpy(PACKETt->destipaddr,PACKETr->srcipaddr,4);
0004f0  0031              MOVS     r1,r6
0004f2  311a              ADDS     r1,r1,#0x1a
0004f4  8220              STRH     r0,[r4,#0x10]         ;540
0004f6  0008              MOVS     r0,r1
0004f8  2204              MOVS     r2,#4
0004fa  307c              ADDS     r0,r0,#0x7c
0004fc  f7fffffe          BL       __aeabi_memcpy
;;;542      memcpy(PACKETt->srcipaddr,PACKETr->destipaddr,4);
000500  0031              MOVS     r1,r6
000502  311e              ADDS     r1,r1,#0x1e
000504  0008              MOVS     r0,r1
000506  2204              MOVS     r2,#4
000508  3074              ADDS     r0,r0,#0x74
00050a  f7fffffe          BL       __aeabi_memcpy
;;;543      PACKETt->iphdrchksum = 0;
00050e  2000              MOVS     r0,#0
000510  8320              STRH     r0,[r4,#0x18]
;;;544      PACKETt->iphdrchksum = HTONS(chksum16(PACKETt->fill1, IpHdrLen));
000512  0030              MOVS     r0,r6
000514  3086              ADDS     r0,r0,#0x86
000516  2114              MOVS     r1,#0x14
000518  4684              MOV      r12,r0
00051a  f7fffffe          BL       chksum16
00051e  0207              LSLS     r7,r0,#8
000520  2114              MOVS     r1,#0x14
000522  4660              MOV      r0,r12
000524  f7fffffe          BL       chksum16
000528  0400              LSLS     r0,r0,#16
00052a  0e00              LSRS     r0,r0,#24
00052c  4307              ORRS     r7,r7,r0
00052e  8327              STRH     r7,[r4,#0x18]
;;;545      PACKETt->destport = PACKETr->srcport;
000530  8c70              LDRH     r0,[r6,#0x22]  ; rxbuffer
000532  84a0              STRH     r0,[r4,#0x24]
;;;546      PACKETt->srcport = PACKETr->destport;
000534  8cb0              LDRH     r0,[r6,#0x24]  ; rxbuffer
000536  8460              STRH     r0,[r4,#0x22]
;;;547      PACKETt->udplen = HTONS(FrameSize - EtherHdrLen - IpHdrLen);
000538  4828              LDR      r0,|L1.1500|
00053a  8840              LDRH     r0,[r0,#2]  ; data_size
00053c  0001              MOVS     r1,r0
00053e  3008              ADDS     r0,r0,#8
000540  0202              LSLS     r2,r0,#8
000542  0400              LSLS     r0,r0,#16
000544  0e00              LSRS     r0,r0,#24
000546  4302              ORRS     r2,r2,r0
;;;548      PACKETt->udpchksum = 0;
000548  2000              MOVS     r0,#0
00054a  84e2              STRH     r2,[r4,#0x26]         ;547
00054c  8520              STRH     r0,[r4,#0x28]
;;;549      CopyToFrame_EMAC(&txbuffer[0], FrameSize);
00054e  4824              LDR      r0,|L1.1504|
000550  312a              ADDS     r1,r1,#0x2a
000552  f7fffffe          BL       CopyToFrame_EMAC
;;;550      if (++idx == NUM_TX_FRAG) idx = 0;
000556  1c6d              ADDS     r5,r5,#1
000558  2d03              CMP      r5,#3
00055a  d100              BNE      |L1.1374|
00055c  2500              MOVS     r5,#0
                  |L1.1374|
;;;551      MAC_TXPRODUCEINDEX = idx;  
00055e  4821              LDR      r0,|L1.1508|
000560  6285              STR      r5,[r0,#0x28]
;;;552      return (1);
;;;553    }
000562  bcf8              POP      {r3-r7}
000564  bc08              POP      {r3}
000566  2001              MOVS     r0,#1                 ;552
000568  4718              BX       r3
;;;554    
                          ENDP

                  emac_handshake PROC
;;;555    void emac_handshake(void) {
00056a  b530              PUSH     {r4,r5,lr}
;;;556    
;;;557       int count;
;;;558       char buf[15];
;;;559       char buf1[15];
;;;560    
;;;561       synchro = false;
00056c  4d1b              LDR      r5,|L1.1500|
;;;562    
;;;563       while(1) {
;;;564         if (emac_getline(buf,1,&count) == 0) {
;;;565           if (buf[0] == '?') {					  
;;;566      	     /* save Dest & Source Ports   */
;;;567     	     DestPort = PACKETr->destport;
00056e  4c1c              LDR      r4,|L1.1504|
000570  2000              MOVS     r0,#0                 ;561
000572  b089              SUB      sp,sp,#0x24           ;555
000574  3c78              SUBS     r4,r4,#0x78
000576  7028              STRB     r0,[r5,#0]            ;561
                  |L1.1400|
000578  2101              MOVS     r1,#1                 ;564
00057a  aa08              ADD      r2,sp,#0x20           ;564
00057c  a804              ADD      r0,sp,#0x10           ;564
00057e  f7fffffe          BL       emac_getline
000582  2800              CMP      r0,#0                 ;564
000584  d1f8              BNE      |L1.1400|
000586  466b              MOV      r3,sp                 ;565
000588  7c18              LDRB     r0,[r3,#0x10]         ;565
00058a  283f              CMP      r0,#0x3f              ;565
00058c  d1f4              BNE      |L1.1400|
00058e  8ca0              LDRH     r0,[r4,#0x24]  ; rxbuffer
;;;568    	     SrcPort  = PACKETr->srcport;
;;;569    
;;;570    #if ETHERNET_DEBUG
;;;571             /* print Dest & Source Ports   */
;;;572    	     print("Dest: ");
;;;573    	     printhexa((DestPort>>8)&0xFF);
;;;574    	     printhexa(DestPort&0xFF);
;;;575    	     print("\nSource: ");
;;;576    	     printhexa((SrcPort>>8)&0xFF);
;;;577    	     printhexa(SrcPort&0xFF);
;;;578    	     print("\n");
;;;579    #endif
;;;580             /* save Host MAC address   */
;;;581    	     memcpy(HostMAC,FRAMEr->source,6);
000590  2206              MOVS     r2,#6
000592  1da1              ADDS     r1,r4,#6
000594  80a8              STRH     r0,[r5,#4]            ;567
000596  8c60              LDRH     r0,[r4,#0x22]         ;568  ; rxbuffer
000598  80e8              STRH     r0,[r5,#6]            ;568
00059a  4810              LDR      r0,|L1.1500|
00059c  301a              ADDS     r0,r0,#0x1a
00059e  f7fffffe          BL       __aeabi_memcpy
;;;582    
;;;583    #if ETHERNET_DEBUG
;;;584             /* print Host MAC address  */
;;;585    	     print("\nSource MAC: ");
;;;586    	     printhexa(HostMAC[5]);
;;;587    	     printhexa(HostMAC[4]);
;;;588    	     printhexa(HostMAC[3]);
;;;589    	     printhexa(HostMAC[2]);
;;;590    	     printhexa(HostMAC[1]);
;;;591    	     printhexa(HostMAC[0]);
;;;592    	     print("\n");
;;;593    #endif
;;;594    
;;;595             emac_sendline_crlf((char *)&sync[0]);         
0005a2  4813              LDR      r0,|L1.1520|
0005a4  f7fffffe          BL       emac_sendline_crlf
;;;596             emac_getline(buf,15,&count);
0005a8  210f              MOVS     r1,#0xf
0005aa  aa08              ADD      r2,sp,#0x20
0005ac  a804              ADD      r0,sp,#0x10
0005ae  f7fffffe          BL       emac_getline
;;;597    	     memcpy(&buf1[0],&sync[0],sizeof(sync));
0005b2  490f              LDR      r1,|L1.1520|
0005b4  220d              MOVS     r2,#0xd
0005b6  4668              MOV      r0,sp
0005b8  f7fffffe          BL       __aeabi_memcpy
;;;598    	     if (str_cmp(&buf[0],&buf1[0])==0) {
0005bc  4669              MOV      r1,sp
0005be  a804              ADD      r0,sp,#0x10
0005c0  f7fffffe          BL       str_cmp
0005c4  2800              CMP      r0,#0
0005c6  d1d7              BNE      |L1.1400|
;;;599               emac_sendline_crlf((char *)&Ok[0]);
0005c8  4809              LDR      r0,|L1.1520|
0005ca  1ec0              SUBS     r0,r0,#3
0005cc  f7fffffe          BL       emac_sendline_crlf
;;;600    		   synchro = true;
0005d0  2001              MOVS     r0,#1
0005d2  7028              STRB     r0,[r5,#0]
;;;601    		   break;
;;;602    	     }
;;;603           }
;;;604    	 }
;;;605       }
;;;606    }
0005d4  b009              ADD      sp,sp,#0x24
0005d6  e577              B        |L1.200|
;;;607    
                          ENDP

                  |L1.1496|
                          DCD      0x0000ea60
                  |L1.1500|
                          DCD      ||.data||
                  |L1.1504|
                          DCD      ||.bss||+0x78
                  |L1.1508|
                          DCD      0xffe00100
                  |L1.1512|
                          DCD      0x7fe00180
                  |L1.1516|
                          DCD      0x4000002a
                  |L1.1520|
                          DCD      ||.constdata||+0x3

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rxbuffer
                          %        120
                  txbuffer
                          %        120

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ||Ok||
000000  4f4b00            DCB      0x4f,0x4b,0x00
                  sync
000003  53                DCB      0x53
000004  796e6368          DCB      0x79,0x6e,0x63,0x68
000008  726f6e69          DCB      0x72,0x6f,0x6e,0x69
00000c  7a656400          DCB      0x7a,0x65,0x64,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  synchro
000000  0000              DCB      0x00,0x00
                  data_size
000002  0000              DCW      0x0000
                  DestPort
000004  0000              DCB      0x00,0x00
                  SrcPort
000006  0000              DCB      0x00,0x00
                  rxptr
                          DCD      0x00000000
                  txptr
                          DCD      0x00000000
                  ethernet_timeout
                          DCD      0x00000000
                  MyMAC
                          DCD      0x00000000
000018  0000              DCB      0x00,0x00
                  HostMAC
00001a  0000              DCB      0x00,0x00
                          DCD      0x00000000
