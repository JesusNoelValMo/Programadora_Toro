; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\uart.o --depend=.\Obj\uart.d --device=DARMP1 --apcs=interwork -O3 -I. -I.\Core_CM3 -ID:\Keil\ARM\INC\NXP --omf_browse=.\Obj\uart.crf Debug\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  conv PROC
;;;24     //*****************************************************//
;;;25     char conv(char c) {
000000  280a              CMP      r0,#0xa
;;;26     	if (c<10)
000002  d201              BCS      |L1.8|
;;;27     	  c+=0x30;
000004  3030              ADDS     r0,r0,#0x30
000006  e000              B        |L1.10|
                  |L1.8|
;;;28         else
;;;29     	  c+=0x37;
000008  3037              ADDS     r0,r0,#0x37
                  |L1.10|
00000a  b2c0              UXTB     r0,r0                 ;27
;;;30     	return c;
;;;31     }
00000c  4770              BX       lr
;;;32     
                          ENDP

                  UART_init PROC
;;;35     //*****************************************************//
;;;36     void UART_init(unsigned int baud) {
00000e  4929              LDR      r1,|L1.180|
;;;37       unsigned int divisor = (64000000 / 16) / baud;
000010  fbb1f1f0          UDIV     r1,r1,r0
000014  4828              LDR      r0,|L1.184|
;;;38     
;;;39       // uart0 is clocked from cclk/1
;;;40       LPC_SC->PCLKSEL0 &= ~(0x3UL << 6);
000016  6802              LDR      r2,[r0,#0]
000018  f02202c0          BIC      r2,r2,#0xc0
00001c  6002              STR      r2,[r0,#0]
;;;41       LPC_SC->PCLKSEL0 |=  (0x1UL << 6);
00001e  6803              LDR      r3,[r0,#0]
;;;42     
;;;43       LPC_UART0->LCR = 0x83;                   // 8 bit, 1 stop bit, no parity, enable DLAB 
000020  2283              MOVS     r2,#0x83
000022  f0430340          ORR      r3,r3,#0x40           ;41
000026  6003              STR      r3,[r0,#0]            ;41
000028  4824              LDR      r0,|L1.188|
00002a  7302              STRB     r2,[r0,#0xc]
;;;44       LPC_UART0->DLL = divisor & 0xFF;
00002c  7001              STRB     r1,[r0,#0]
;;;45       LPC_UART0->DLM = (divisor >> 8) & 0xFF;
00002e  0a09              LSRS     r1,r1,#8
000030  7101              STRB     r1,[r0,#4]
;;;46       LPC_UART0->LCR &= ~0x80;                 // Disable DLAB 
000032  7b02              LDRB     r2,[r0,#0xc]
;;;47       LPC_UART0->FCR = 1;
000034  2101              MOVS     r1,#1
000036  f0220280          BIC      r2,r2,#0x80           ;46
00003a  7302              STRB     r2,[r0,#0xc]          ;46
00003c  7201              STRB     r1,[r0,#8]
;;;48     
;;;49       LPC_PINCON->PINSEL0 |= 0x00000050;           // RxD0 and TxD0 
00003e  4820              LDR      r0,|L1.192|
000040  6801              LDR      r1,[r0,#0]
000042  f0410150          ORR      r1,r1,#0x50
000046  6001              STR      r1,[r0,#0]
;;;50     }
000048  4770              BX       lr
;;;51     
                          ENDP

                  getchar PROC
;;;52     int getchar (void) {
00004a  481c              LDR      r0,|L1.188|
;;;53      				
;;;54       if (LPC_UART0->LSR & 0x01)
00004c  7d01              LDRB     r1,[r0,#0x14]
00004e  07c9              LSLS     r1,r1,#31
000050  d001              BEQ      |L1.86|
;;;55         return (LPC_UART0->RBR);
000052  7800              LDRB     r0,[r0,#0]
;;;56       else
;;;57         return (-1);
;;;58     }
000054  4770              BX       lr
                  |L1.86|
000056  f04f30ff          MOV      r0,#0xffffffff        ;57
00005a  4770              BX       lr
;;;59     
                          ENDP

                  putchar PROC
;;;60     int putchar(int ch) {
00005c  4917              LDR      r1,|L1.188|
;;;61     
;;;62       if (ch == '\n')  {
00005e  280a              CMP      r0,#0xa
000060  d104              BNE      |L1.108|
                  |L1.98|
;;;63         while (!(LPC_UART0->LSR & 0x20));
000062  7d0a              LDRB     r2,[r1,#0x14]
000064  0692              LSLS     r2,r2,#26
000066  d5fc              BPL      |L1.98|
;;;64         LPC_UART0->THR = CR;
000068  220d              MOVS     r2,#0xd
00006a  700a              STRB     r2,[r1,#0]
                  |L1.108|
;;;65       }
;;;66       while (!(LPC_UART0->LSR & 0x20));
00006c  7d0a              LDRB     r2,[r1,#0x14]
00006e  0692              LSLS     r2,r2,#26
000070  d5fc              BPL      |L1.108|
;;;67       return (LPC_UART0->THR = ch);
000072  b2c0              UXTB     r0,r0
000074  7008              STRB     r0,[r1,#0]
;;;68      }
000076  4770              BX       lr
;;;69     
                          ENDP

                  print PROC
;;;70     void print(char * str) {
000078  b510              PUSH     {r4,lr}
00007a  4604              MOV      r4,r0
;;;71       int i=0;
00007c  2300              MOVS     r3,#0
                  |L1.126|
;;;72     
;;;73       while(1) {
;;;74     	putchar(str[i]);
00007e  5ce0              LDRB     r0,[r4,r3]
000080  f7fffffe          BL       putchar
;;;75     	if (str[i]=='\0')
000084  5ce0              LDRB     r0,[r4,r3]
000086  2800              CMP      r0,#0
000088  d001              BEQ      |L1.142|
;;;76     	  break;
;;;77     	i++;
00008a  1c5b              ADDS     r3,r3,#1
00008c  e7f7              B        |L1.126|
                  |L1.142|
;;;78       }
;;;79     }
00008e  bd10              POP      {r4,pc}
;;;80     
                          ENDP

                  printhexa PROC
;;;81     void printhexa(char num){
000090  b500              PUSH     {lr}
000092  4603              MOV      r3,r0
;;;82      
;;;83       putchar(conv((num>>4)&0x0F));
000094  0900              LSRS     r0,r0,#4
000096  f7fffffe          BL       conv
00009a  f7fffffe          BL       putchar
;;;84       putchar(conv(num&0x0F));
00009e  f003000f          AND      r0,r3,#0xf
0000a2  f7fffffe          BL       conv
0000a6  f7fffffe          BL       putchar
;;;85       putchar(' ');
0000aa  2020              MOVS     r0,#0x20
0000ac  f85deb04          POP      {lr}
0000b0  e7fe              B        putchar
;;;86     }
;;;87     
                          ENDP

                  printascii PROC
;;;88     void printascii(char num){
0000b2  e7fe              B        putchar
;;;89      
;;;90       putchar(num);
;;;91     }
;;;92     
                          ENDP

                  |L1.180|
                          DCD      0x003d0900
                  |L1.184|
                          DCD      0x400fc1a8
                  |L1.188|
                          DCD      0x4000c000
                  |L1.192|
                          DCD      0x4002c000
