<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\ethernet_bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\ethernet_bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Fri Jun 18 09:47:10 2010
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c8b748]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c8b61c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b61c]">NMI_Handler</a><BR>
 <LI><a href="#[c8b5e0]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b5e0]">HardFault_Handler</a><BR>
 <LI><a href="#[c8b5a4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b5a4]">MemManage_Handler</a><BR>
 <LI><a href="#[c8b568]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b568]">BusFault_Handler</a><BR>
 <LI><a href="#[c8b52c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b52c]">UsageFault_Handler</a><BR>
 <LI><a href="#[c8b4f0]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b4f0]">SVC_Handler</a><BR>
 <LI><a href="#[c8b4b4]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b4b4]">DebugMon_Handler</a><BR>
 <LI><a href="#[c8b478]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b478]">PendSV_Handler</a><BR>
 <LI><a href="#[c8b43c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b43c]">SysTick_Handler</a><BR>
 <LI><a href="#[c8b400]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b400]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c8b658]">Reset_Handler</a>
 <LI><a href="#[c8b61c]">NMI_Handler</a>
 <LI><a href="#[c8b5e0]">HardFault_Handler</a>
 <LI><a href="#[c8b5a4]">MemManage_Handler</a>
 <LI><a href="#[c8b568]">BusFault_Handler</a>
 <LI><a href="#[c8b52c]">UsageFault_Handler</a>
 <LI><a href="#[c8b4f0]">SVC_Handler</a>
 <LI><a href="#[c8b4b4]">DebugMon_Handler</a>
 <LI><a href="#[c8b478]">PendSV_Handler</a>
 <LI><a href="#[c8b43c]">SysTick_Handler</a>
 <LI><a href="#[c8ac80]">WDT_IRQHandler</a>
 <LI><a href="#[c8ae9c]">TIMER0_IRQHandler</a>
 <LI><a href="#[c8ae60]">TIMER1_IRQHandler</a>
 <LI><a href="#[c8ae24]">TIMER2_IRQHandler</a>
 <LI><a href="#[c8ade8]">TIMER3_IRQHandler</a>
 <LI><a href="#[c8adac]">UART0_IRQHandler</a>
 <LI><a href="#[c8ad70]">UART1_IRQHandler</a>
 <LI><a href="#[c8ad34]">UART2_IRQHandler</a>
 <LI><a href="#[c8acf8]">UART3_IRQHandler</a>
 <LI><a href="#[c8b040]">PWM1_IRQHandler</a>
 <LI><a href="#[c8b1e4]">I2C0_IRQHandler</a>
 <LI><a href="#[c8b1a8]">I2C1_IRQHandler</a>
 <LI><a href="#[c8b16c]">I2C2_IRQHandler</a>
 <LI><a href="#[c8af50]">SPI_IRQHandler</a>
 <LI><a href="#[c8af14]">SSP0_IRQHandler</a>
 <LI><a href="#[c8aed8]">SSP1_IRQHandler</a>
 <LI><a href="#[c8b0b8]">PLL0_IRQHandler</a>
 <LI><a href="#[c8af8c]">RTC_IRQHandler</a>
 <LI><a href="#[c8b310]">EINT0_IRQHandler</a>
 <LI><a href="#[c8b2d4]">EINT1_IRQHandler</a>
 <LI><a href="#[c8b298]">EINT2_IRQHandler</a>
 <LI><a href="#[c8b25c]">EINT3_IRQHandler</a>
 <LI><a href="#[c8b400]">ADC_IRQHandler</a>
 <LI><a href="#[c8b3c4]">BOD_IRQHandler</a>
 <LI><a href="#[c8acbc]">USB_IRQHandler</a>
 <LI><a href="#[c8b388]">CAN_IRQHandler</a>
 <LI><a href="#[c8b34c]">DMA_IRQHandler</a>
 <LI><a href="#[c8b130]">I2S_IRQHandler</a>
 <LI><a href="#[c8b220]">ENET_IRQHandler</a>
 <LI><a href="#[c8afc8]">RIT_IRQHandler</a>
 <LI><a href="#[c8b0f4]">MCPWM_IRQHandler</a>
 <LI><a href="#[c8b004]">QEI_IRQHandler</a>
 <LI><a href="#[c8b07c]">PLL1_IRQHandler</a>
 <LI><a href="#[c8b694]">main</a>
 <LI><a href="#[c80c6c]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c84ca4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c7e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[c84b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c7e728]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c84ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c7e6ec]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c84b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c7e6b0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c7e674]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c7e4d0]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c7e3e0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c83bc4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c84524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c82094]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[c8210c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[c824cc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c82364]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c81fa4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c8201c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c823dc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c822ec]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c828c8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[c82724]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[c826ac]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[c82634]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c825bc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c82544]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c827d8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c81f68]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[c82454]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c82274]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c82850]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[c80fb4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c817e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c80348]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c80168]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c8012c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c80294]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[c803fc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[c8021c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[c84b78]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c7e6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[c84ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c845d8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c84254]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c84128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c84524]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c83bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c84560]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c84470]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c83fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[c8b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c844ac]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c83444]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c83fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c817e8]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c80fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c81824]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c817ac]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c814a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c8b658]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b61c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b5e0]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b5a4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b568]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b52c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b4f0]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b4b4]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b478]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b43c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b400]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b3c4]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b388]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b34c]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b310]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b2d4]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b298]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b25c]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b220]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b1e4]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b1a8]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b16c]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b130]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b0f4]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b0b8]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b07c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b040]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b004]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8afc8]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8af8c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8af50]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8af14]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8aed8]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ae9c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ae60]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ae24]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ade8]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8adac]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ad70]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ad34]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8acf8]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8acbc]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8ac80]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c8b748]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c84128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c89e34]"></a>init_PLL</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_PLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c89d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[c89df8]"></a>init_MAM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_init.o(.text), UNUSED)

<P><STRONG><a name="[c89dbc]"></a>init_PCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_init.o(.text), UNUSED)

<P><STRONG><a name="[c89d80]"></a>VectorsRemap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_init.o(.text), UNUSED)

<P><STRONG><a name="[c89d44]"></a>board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = board_init &rArr; init_PLL
</UL>
<BR>[Calls]<UL><LI><a href="#[c89ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_init
<LI><a href="#[c89d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Delay
<LI><a href="#[c89e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PLL
</UL>
<BR>[Called By]<UL><LI><a href="#[c893e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[c893e4]"></a>enter_isp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sbl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c892b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
<LI><a href="#[c892f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comms
<LI><a href="#[c8936c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_handshake
<LI><a href="#[c89d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8b694]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sbl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; enter_isp &rArr; isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c8927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_code_present
<LI><a href="#[c89330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;execute_user_code
<LI><a href="#[c893a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_isp_entry_pin
<LI><a href="#[c893e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>
<BR>[Called By]<UL><LI><a href="#[c84470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[c892f4]"></a>init_comms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_comms &rArr; init_emac &rArr; read_PHY &rArr; mdio_read &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[c88bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>
<BR>[Called By]<UL><LI><a href="#[c893e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[c88cdc]"></a>getline</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>
<BR>[Called By]<UL><LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[c87ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_isp
<LI><a href="#[c892b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[c88ca0]"></a>sendline_crlf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[c87a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[c87a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[c87ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[c87b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[c87b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[c87b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[c87bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[c87ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_isp
<LI><a href="#[c892b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[c8936c]"></a>comm_handshake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = comm_handshake &rArr; emac_handshake &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
</UL>
<BR>[Called By]<UL><LI><a href="#[c893e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[c89ccc]"></a>Timer_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c89d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[c878f0]"></a>Timer_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c87bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
</UL>

<P><STRONG><a name="[c867d4]"></a>Timer_GetTimestamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[c86798]"></a>Timer_HasTimestampExpired</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
<LI><a href="#[c89d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Delay
</UL>

<P><STRONG><a name="[c89d08]"></a>Timer_Delay</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c86798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_HasTimestampExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[c89d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[c84e0c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c84dd0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c84d94]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c80c6c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[c80c30]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c87f08]"></a>is_div</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
</UL>

<P><STRONG><a name="[c87ecc]"></a>__rt_div0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[c87e90]"></a>str_cmp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c87ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_isp
<LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
</UL>

<P><STRONG><a name="[c87e54]"></a>a_to_i</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_to_i
</UL>
<BR>[Called By]<UL><LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
</UL>

<P><STRONG><a name="[c87e18]"></a>i_to_a</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i_to_a
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[c87a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[c87a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[c87ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[c87b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[c87b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[c87b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[c87bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[c892b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[c87ddc]"></a>run_isp</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isp_iap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c87e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_cmp
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[c88cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[c87da0]"></a>param_check</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = param_check &rArr; a_to_i
</UL>
<BR>[Calls]<UL><LI><a href="#[c87e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_to_i
<LI><a href="#[c87f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_div
</UL>
<BR>[Called By]<UL><LI><a href="#[c87a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[c87a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[c87ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[c87b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[c87b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[c87b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[c87bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
</UL>

<P><STRONG><a name="[c87d64]"></a>iap_entry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[c87d28]"></a>decode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c87cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uudecode
</UL>

<P><STRONG><a name="[c87cec]"></a>uudecode</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uudecode
</UL>
<BR>[Calls]<UL><LI><a href="#[c87d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode
</UL>
<BR>[Called By]<UL><LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
</UL>

<P><STRONG><a name="[c87cb0]"></a>encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c87c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuencode
</UL>

<P><STRONG><a name="[c87c74]"></a>uuencode</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uuencode
</UL>
<BR>[Calls]<UL><LI><a href="#[c87cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode
</UL>
<BR>[Called By]<UL><LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[c87c38]"></a>write_to_ram</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_to_ram &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c87cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uudecode
<LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c87e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_to_i
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[c88cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87bfc]"></a>read</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c87c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuencode
<LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c87e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_cmp
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[c88cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87bc0]"></a>go_cmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = go_cmd &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c878f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_DeInit
<LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87b84]"></a>unlock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = unlock &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87b48]"></a>prepare_sector</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prepare_sector &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87b0c]"></a>copy</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = copy &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87ad0]"></a>erase</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = erase &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87a94]"></a>blank_check</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = blank_check &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87a58]"></a>compare_mem</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = compare_mem &rArr; sendline_crlf &rArr; emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c87da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_check
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
</UL>

<P><STRONG><a name="[c87a1c]"></a>tokenize</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tokenize &rArr; user_code_present
</UL>
<BR>[Calls]<UL><LI><a href="#[c8927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_code_present
</UL>
<BR>[Called By]<UL><LI><a href="#[c892b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[c879e0]"></a>enable_interrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[c879a4]"></a>disable_interrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, isp_iap.o(.text), UNUSED)

<P><STRONG><a name="[c89330]"></a>execute_user_code</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8927c]"></a>user_code_present</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_code_present
</UL>
<BR>[Called By]<UL><LI><a href="#[c87a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[c8b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c893a8]"></a>check_isp_entry_pin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, isp_iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c87968]"></a>is_LPC175x</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_LPC175x
</UL>
<BR>[Called By]<UL><LI><a href="#[c88bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>

<P><STRONG><a name="[c8792c]"></a>exec_isp_cmd</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c87a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_mem
<LI><a href="#[c87a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blank_check
<LI><a href="#[c87ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[c87b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[c87b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_sector
<LI><a href="#[c87b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[c87bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_cmd
<LI><a href="#[c87bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[c87c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_ram
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>
<BR>[Called By]<UL><LI><a href="#[c892b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isp_cmd_loop
</UL>

<P><STRONG><a name="[c892b8]"></a>isp_cmd_loop</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, isp_iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = isp_cmd_loop &rArr; exec_isp_cmd &rArr; read &rArr; getline &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c8792c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_isp_cmd
<LI><a href="#[c87a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tokenize
<LI><a href="#[c87e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i_to_a
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
<LI><a href="#[c88cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>
<BR>[Called By]<UL><LI><a href="#[c893e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_isp
</UL>

<P><STRONG><a name="[c869f0]"></a>write_PHY</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_PHY &rArr; mdio_write &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[c866a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c88bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>

<P><STRONG><a name="[c869b4]"></a>read_PHY</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_PHY &rArr; mdio_read &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[c866e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c88bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>

<P><STRONG><a name="[c86978]"></a>ReadFrame_EMAC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8693c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame_EMAC
</UL>

<P><STRONG><a name="[c8693c]"></a>CopyFromFrame_EMAC</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopyFromFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c86978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[c86900]"></a>same_mac</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = same_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[c868c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_pass
</UL>

<P><STRONG><a name="[c868c4]"></a>filter_pass</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c8666c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[c86900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;same_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[c86888]"></a>WriteFrame_EMAC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, emac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8684c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToFrame_EMAC
</UL>

<P><STRONG><a name="[c8684c]"></a>CopyToFrame_EMAC</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c86888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
</UL>

<P><STRONG><a name="[c86810]"></a>chksum16</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
</UL>

<P><STRONG><a name="[c88bb0]"></a>init_emac</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_emac &rArr; read_PHY &rArr; mdio_read &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[c8666c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[c8675c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[c869b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[c869f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[c87968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_LPC175x
</UL>
<BR>[Called By]<UL><LI><a href="#[c892f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comms
</UL>

<P><STRONG><a name="[c88c64]"></a>emac_getline</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c84fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c86630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printascii
<LI><a href="#[c8666c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[c86798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_HasTimestampExpired
<LI><a href="#[c867d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_GetTimestamp
<LI><a href="#[c868c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_pass
<LI><a href="#[c8693c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFromFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
<LI><a href="#[c88cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getline
</UL>

<P><STRONG><a name="[c88bec]"></a>emac_sendline_crlf</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = emac_sendline_crlf &rArr; CopyToFrame_EMAC
</UL>
<BR>[Calls]<UL><LI><a href="#[c84fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c86630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printascii
<LI><a href="#[c8666c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[c86810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum16
<LI><a href="#[c8684c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyToFrame_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
<LI><a href="#[c88ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendline_crlf
</UL>

<P><STRONG><a name="[c88c28]"></a>emac_handshake</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, emac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = emac_handshake &rArr; emac_getline &rArr; filter_pass &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[c84fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c865f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printhexa
<LI><a href="#[c8666c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[c87e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_cmp
<LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
<LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>
<BR>[Called By]<UL><LI><a href="#[c8936c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_handshake
</UL>

<P><STRONG><a name="[c866e4]"></a>mdio_read</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mdio_read &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[c86324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[c86360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c869b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>

<P><STRONG><a name="[c866a8]"></a>mdio_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mdio_write &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[c86360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c869f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
</UL>

<P><STRONG><a name="[c8576c]"></a>conv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c865f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printhexa
</UL>

<P><STRONG><a name="[c8675c]"></a>UART_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c88bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
</UL>

<P><STRONG><a name="[c85730]"></a>getchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[c856f4]"></a>putchar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c865f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printhexa
<LI><a href="#[c86630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printascii
<LI><a href="#[c8666c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[c8666c]"></a>print</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = print
</UL>
<BR>[Calls]<UL><LI><a href="#[c856f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c868c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_pass
<LI><a href="#[c88bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_emac
<LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
<LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
<LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[c865f4]"></a>printhexa</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = printhexa
</UL>
<BR>[Calls]<UL><LI><a href="#[c856f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[c8576c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv
</UL>
<BR>[Called By]<UL><LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
</UL>

<P><STRONG><a name="[c86630]"></a>printascii</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c856f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
<LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[c84fb0]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c88bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_sendline_crlf
<LI><a href="#[c88c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_handshake
<LI><a href="#[c88c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emac_getline
</UL>

<P><STRONG><a name="[c84f74]"></a>__rt_memcpy</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c84920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[c84f38]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c84920]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c84f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[c848e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c848a8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c8486c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c84128]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c83534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[c8b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[c84254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c83fc0]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c83444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c84470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c83570]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c83534]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c84128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c834f8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c814a0]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c817ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c86360]"></a>output_MDIO</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c866a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_write
<LI><a href="#[c866e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>

<P><STRONG><a name="[c86324]"></a>turnaround_MDIO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c866e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdio_read
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
