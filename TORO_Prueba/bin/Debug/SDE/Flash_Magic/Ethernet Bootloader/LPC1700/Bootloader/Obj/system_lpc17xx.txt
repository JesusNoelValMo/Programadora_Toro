; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\system_lpc17xx.o --depend=.\Obj\system_lpc17xx.d --device=DARMP1 --apcs=interwork -O3 -I. -I.\Core_CM3 -ID:\Keil\ARM\INC\NXP --omf_browse=.\Obj\system_lpc17xx.crf Core_CM3\system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;408     */
;;;409    void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;410    {
;;;411    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;412      LPC_SC->SCS       = SCS_Val;
000002  4947              LDR      r1,|L1.288|
000004  2020              MOVS     r0,#0x20
000006  f8c101a0          STR      r0,[r1,#0x1a0]
;;;413      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;414        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
00000a  bf00              NOP      
                  |L1.12|
00000c  f8d101a0          LDR      r0,[r1,#0x1a0]
000010  0640              LSLS     r0,r0,#25
000012  d5fb              BPL      |L1.12|
;;;415      }
;;;416    
;;;417      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000014  2403              MOVS     r4,#3
000016  3180              ADDS     r1,r1,#0x80
000018  f8c14084          STR      r4,[r1,#0x84]
;;;418    
;;;419      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001c  f04f6060          MOV      r0,#0xe000000
000020  f8c10128          STR      r0,[r1,#0x128]
;;;420      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000024  0140              LSLS     r0,r0,#5
000026  f8c1012c          STR      r0,[r1,#0x12c]
;;;421    
;;;422    #if (PLL0_SETUP)
;;;423      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
00002a  2001              MOVS     r0,#1
00002c  f8c1008c          STR      r0,[r1,#0x8c]
;;;424      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000030  220b              MOVS     r2,#0xb
000032  604a              STR      r2,[r1,#4]
;;;425      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000034  6008              STR      r0,[r1,#0]
;;;426      LPC_SC->PLL0FEED  = 0xAA;
000036  22aa              MOVS     r2,#0xaa
000038  60ca              STR      r2,[r1,#0xc]
;;;427      LPC_SC->PLL0FEED  = 0x55;
00003a  2355              MOVS     r3,#0x55
00003c  60cb              STR      r3,[r1,#0xc]
00003e  3980              SUBS     r1,r1,#0x80
                  |L1.64|
;;;428      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
000040  f8d10088          LDR      r0,[r1,#0x88]
000044  0140              LSLS     r0,r0,#5
000046  d5fb              BPL      |L1.64|
;;;429    
;;;430      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000048  f8414f80          STR      r4,[r1,#0x80]!
;;;431      LPC_SC->PLL0FEED  = 0xAA;
00004c  60ca              STR      r2,[r1,#0xc]
;;;432      LPC_SC->PLL0FEED  = 0x55;
00004e  60cb              STR      r3,[r1,#0xc]
;;;433    #endif
;;;434    
;;;435    #if (PLL1_SETUP)
;;;436      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;437      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;438      LPC_SC->PLL1FEED  = 0xAA;
;;;439      LPC_SC->PLL1FEED  = 0x55;
;;;440      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;441    
;;;442      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;443      LPC_SC->PLL1FEED  = 0xAA;
;;;444      LPC_SC->PLL1FEED  = 0x55;
;;;445    #else
;;;446      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
000050  2000              MOVS     r0,#0
000052  f8c10088          STR      r0,[r1,#0x88]
;;;447    #endif
;;;448    
;;;449      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
000056  4a33              LDR      r2,|L1.292|
000058  644a              STR      r2,[r1,#0x44]
;;;450    
;;;451      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
00005a  f8c10148          STR      r0,[r1,#0x148]
;;;452    #endif
;;;453    
;;;454      /* Determine clock frequency according to clock register values             */
;;;455      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
00005e  6888              LDR      r0,[r1,#8]
000060  3980              SUBS     r1,r1,#0x80
000062  ea6f6010          MVN      r0,r0,LSR #24
000066  0780              LSLS     r0,r0,#30
;;;456        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;457          case 0:                           /* Internal RC oscillator => PLL0     */
;;;458          case 3:                           /* Reserved, default to Internal RC   */
;;;459            SystemFrequency = (IRC_OSC * 
000068  4a2f              LDR      r2,|L1.296|
00006a  f8d1010c          LDR      r0,[r1,#0x10c]        ;456
00006e  f0000003          AND      r0,r0,#3              ;456
000072  d138              BNE      |L1.230|
000074  b128              CBZ      r0,|L1.130|
000076  2801              CMP      r0,#1                 ;456
000078  d011              BEQ      |L1.158|
00007a  2802              CMP      r0,#2                 ;456
00007c  d024              BEQ      |L1.200|
00007e  2803              CMP      r0,#3                 ;456
000080  d149              BNE      |L1.278|
                  |L1.130|
000082  f8510f88          LDR      r0,[r1,#0x88]!
000086  f3c0000e          UBFX     r0,r0,#0,#15
00008a  1c40              ADDS     r0,r0,#1
00008c  0043              LSLS     r3,r0,#1
00008e  6808              LDR      r0,[r1,#0]
000090  f3c04007          UBFX     r0,r0,#16,#8
000094  1c40              ADDS     r0,r0,#1
000096  fbb3f0f0          UDIV     r0,r3,r0
00009a  4b24              LDR      r3,|L1.300|
;;;460                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;461                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;462                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;463            break;
00009c  e00c              B        |L1.184|
                  |L1.158|
;;;464          case 1:                           /* Main oscillator => PLL0            */
;;;465            SystemFrequency = (OSC_CLK * 
00009e  f8510f88          LDR      r0,[r1,#0x88]!
0000a2  f3c0000e          UBFX     r0,r0,#0,#15
0000a6  1c40              ADDS     r0,r0,#1
0000a8  0043              LSLS     r3,r0,#1
0000aa  6808              LDR      r0,[r1,#0]
0000ac  f3c04007          UBFX     r0,r0,#16,#8
0000b0  1c40              ADDS     r0,r0,#1
0000b2  fbb3f0f0          UDIV     r0,r3,r0
0000b6  4b1e              LDR      r3,|L1.304|
                  |L1.184|
0000b8  4358              MULS     r0,r3,r0              ;459
0000ba  6fcb              LDR      r3,[r1,#0x7c]         ;459
0000bc  3988              SUBS     r1,r1,#0x88           ;459
0000be  b2db              UXTB     r3,r3                 ;459
0000c0  1c5b              ADDS     r3,r3,#1              ;459
0000c2  fbb0f0f3          UDIV     r0,r0,r3              ;459
0000c6  e025              B        |L1.276|
                  |L1.200|
;;;466                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;467                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;468                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;469            break;
;;;470          case 2:                           /* RTC oscillator => PLL0             */
;;;471            SystemFrequency = (RTC_CLK * 
0000c8  f8510f88          LDR      r0,[r1,#0x88]!
0000cc  f3c0000e          UBFX     r0,r0,#0,#15
0000d0  1c40              ADDS     r0,r0,#1
0000d2  0043              LSLS     r3,r0,#1
0000d4  6808              LDR      r0,[r1,#0]
0000d6  f3c04007          UBFX     r0,r0,#16,#8
0000da  1c40              ADDS     r0,r0,#1
0000dc  fbb3f0f0          UDIV     r0,r3,r0
0000e0  f44f43fa          MOV      r3,#0x7d00
;;;472                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;473                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;474                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;475            break;
0000e4  e7e8              B        |L1.184|
                  |L1.230|
;;;476        }
;;;477      } else {
;;;478        switch (LPC_SC->CLKSRCSEL & 0x03) {
0000e6  b128              CBZ      r0,|L1.244|
0000e8  2801              CMP      r0,#1
0000ea  d007              BEQ      |L1.252|
0000ec  2802              CMP      r0,#2
0000ee  d009              BEQ      |L1.260|
0000f0  2803              CMP      r0,#3
0000f2  d110              BNE      |L1.278|
                  |L1.244|
;;;479          case 0:                           /* Internal RC oscillator => PLL0     */
;;;480          case 3:                           /* Reserved, default to Internal RC   */
;;;481            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0000f4  f8d10104          LDR      r0,[r1,#0x104]
0000f8  4b0c              LDR      r3,|L1.300|
;;;482            break;
0000fa  e007              B        |L1.268|
                  |L1.252|
;;;483          case 1:                           /* Main oscillator => PLL0            */
;;;484            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0000fc  f8d10104          LDR      r0,[r1,#0x104]
000100  4b0b              LDR      r3,|L1.304|
;;;485            break;
000102  e003              B        |L1.268|
                  |L1.260|
;;;486          case 2:                           /* RTC oscillator => PLL0             */
;;;487            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000104  f8d10104          LDR      r0,[r1,#0x104]
000108  f44f43fa          MOV      r3,#0x7d00
                  |L1.268|
00010c  b2c0              UXTB     r0,r0
00010e  1c40              ADDS     r0,r0,#1
000110  fbb3f0f0          UDIV     r0,r3,r0
                  |L1.276|
000114  6010              STR      r0,[r2,#0]  ; SystemFrequency
                  |L1.278|
;;;488            break;
;;;489        }
;;;490      }
;;;491    
;;;492    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;493      LPC_SC->FLASHCFG  = FLASHCFG_Val;
000116  f243003a          MOV      r0,#0x303a
00011a  6008              STR      r0,[r1,#0]
;;;494    #endif
;;;495    }
00011c  bd10              POP      {r4,pc}
                          ENDP

00011e  0000              DCW      0x0000
                  |L1.288|
                          DCD      0x400fc000
                  |L1.292|
                          DCD      0x04ea97de
                  |L1.296|
                          DCD      ||.data||
                  |L1.300|
                          DCD      0x003d0900
                  |L1.304|
                          DCD      0x00b71b00

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900
