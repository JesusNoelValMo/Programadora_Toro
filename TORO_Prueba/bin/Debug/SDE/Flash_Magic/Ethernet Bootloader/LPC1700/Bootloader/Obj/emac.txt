; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\Obj\emac.o --depend=.\Obj\emac.d --device=DARMP1 --apcs=interwork -O3 -I. -I.\Core_CM3 -ID:\Keil\ARM\INC\NXP --omf_browse=.\Obj\emac.crf ethernet\emac.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  write_PHY PROC
;;;91     //*****************************************************//
;;;92     void write_PHY (int PhyReg, int Value) {
000000  4aff              LDR      r2,|L1.1024|
;;;93       unsigned int tout;
;;;94     
;;;95       /* if LPC175x then use software MIIM/MDIO */
;;;96       if (dev_175x == TRUE)
000002  6892              LDR      r2,[r2,#8]  ; dev_175x
000004  2a01              CMP      r2,#1
000006  d101              BNE      |L1.12|
;;;97       {
;;;98         mdio_write(PhyReg, Value);
000008  f7ffbffe          B.W      mdio_write
                  |L1.12|
;;;99       }
;;;100      /* use hardware MIIM/MDIO */
;;;101      else
;;;102      {
;;;103        LPC_EMAC->MADR = (PHY_ADDRESS<<8) | PhyReg;
00000c  f4407080          ORR      r0,r0,#0x100
000010  f04f42a0          MOV      r2,#0x50000000
000014  6290              STR      r0,[r2,#0x28]
;;;104        LPC_EMAC->MWTD = Value;
000016  62d1              STR      r1,[r2,#0x2c]
;;;105    
;;;106        /* Wait utill operation completed */
;;;107        tout = 0;
000018  2000              MOVS     r0,#0
;;;108        for (tout = 0; tout < MII_WR_TOUT; tout++) {
00001a  1313              ASRS     r3,r2,#12
                  |L1.28|
;;;109          if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
00001c  6b51              LDR      r1,[r2,#0x34]
00001e  07c9              LSLS     r1,r1,#31
000020  d002              BEQ      |L1.40|
000022  1c40              ADDS     r0,r0,#1              ;108
000024  4298              CMP      r0,r3                 ;108
000026  d3f9              BCC      |L1.28|
                  |L1.40|
;;;110            break;
;;;111          }
;;;112        }
;;;113      }
;;;114    }
000028  4770              BX       lr
;;;115    
                          ENDP

                  read_PHY PROC
;;;116    unsigned short read_PHY (unsigned char PhyReg) {
00002a  b510              PUSH     {r4,lr}
;;;117      unsigned int tout;
;;;118      unsigned short Value;
;;;119    
;;;120      /* if LPC175x then use software MIIM/MDIO */
;;;121      if (dev_175x == TRUE)
00002c  49f4              LDR      r1,|L1.1024|
00002e  6889              LDR      r1,[r1,#8]  ; dev_175x
000030  2901              CMP      r1,#1
000032  d102              BNE      |L1.58|
;;;122      {
;;;123        Value = mdio_read(PhyReg);
000034  f7fffffe          BL       mdio_read
000038  e011              B        |L1.94|
                  |L1.58|
;;;124      }
;;;125      /* use hardware MIIM/MDIO */
;;;126      else
;;;127      {
;;;128        LPC_EMAC->MADR = (PHY_ADDRESS<<8) | PhyReg;
00003a  f4407080          ORR      r0,r0,#0x100
00003e  f04f41a0          MOV      r1,#0x50000000
000042  6288              STR      r0,[r1,#0x28]
;;;129        LPC_EMAC->MCMD = MCMD_READ;
000044  2001              MOVS     r0,#1
000046  6248              STR      r0,[r1,#0x24]
;;;130    
;;;131        /* Wait until operation completed */
;;;132        tout = 0;
000048  2000              MOVS     r0,#0
;;;133        for (tout = 0; tout < MII_RD_TOUT; tout++) {
00004a  130b              ASRS     r3,r1,#12
                  |L1.76|
;;;134          if ((LPC_EMAC->MIND & MIND_BUSY) == 0) {
00004c  6b4a              LDR      r2,[r1,#0x34]
00004e  07d2              LSLS     r2,r2,#31
000050  d002              BEQ      |L1.88|
000052  1c40              ADDS     r0,r0,#1              ;133
000054  4298              CMP      r0,r3                 ;133
000056  d3f9              BCC      |L1.76|
                  |L1.88|
;;;135            break;
;;;136          }
;;;137        }
;;;138        LPC_EMAC->MCMD = 0;
000058  2000              MOVS     r0,#0
00005a  6248              STR      r0,[r1,#0x24]
;;;139        Value = LPC_EMAC->MRDD;
00005c  6b08              LDR      r0,[r1,#0x30]
                  |L1.94|
00005e  b280              UXTH     r0,r0                 ;123
;;;140      }
;;;141    
;;;142      return Value;
;;;143    }
000060  bd10              POP      {r4,pc}
;;;144    
                          ENDP

                  ReadFrame_EMAC PROC
;;;145    unsigned short ReadFrame_EMAC(void)
000062  4ae7              LDR      r2,|L1.1024|
;;;146    {
;;;147      return (*rxptr++);
000064  68d1              LDR      r1,[r2,#0xc]  ; rxptr
000066  f8310b02          LDRH     r0,[r1],#2
00006a  60d1              STR      r1,[r2,#0xc]  ; rxptr
;;;148    }
00006c  4770              BX       lr
;;;149    
                          ENDP

                  CopyFromFrame_EMAC PROC
;;;150    void CopyFromFrame_EMAC(void *Dest, unsigned short Size) {
00006e  b510              PUSH     {r4,lr}
000070  460c              MOV      r4,r1
;;;151      unsigned short * piDest;                       
;;;152    
;;;153      piDest = Dest;                                 
000072  4603              MOV      r3,r0
;;;154      while (Size > 1) {
000074  e006              B        |L1.132|
;;;155        *piDest++ = ReadFrame_EMAC();
000076  bf00              NOP      
                  |L1.120|
000078  f7fffffe          BL       ReadFrame_EMAC
;;;156        Size -= 2;
00007c  1ea4              SUBS     r4,r4,#2
00007e  f8230b02          STRH     r0,[r3],#2            ;155
000082  b2a4              UXTH     r4,r4
                  |L1.132|
000084  2c01              CMP      r4,#1                 ;154
000086  d8f7              BHI      |L1.120|
;;;157      } 
;;;158      if (Size) {                                         
000088  2c00              CMP      r4,#0
00008a  d002              BEQ      |L1.146|
;;;159        *(unsigned char *)piDest = (char)ReadFrame_EMAC();
00008c  f7fffffe          BL       ReadFrame_EMAC
000090  7018              STRB     r0,[r3,#0]
                  |L1.146|
;;;160      }                                                   
;;;161    }
000092  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  same_mac PROC
;;;163    int same_mac(char * mac1,char * mac2) {
000094  b510              PUSH     {r4,lr}
;;;164      int i;
;;;165      
;;;166      for(i=0; i<6; i++) {
000096  2200              MOVS     r2,#0
                  |L1.152|
;;;167        if(mac1[i] != mac2[i])
000098  5c83              LDRB     r3,[r0,r2]
00009a  5c8c              LDRB     r4,[r1,r2]
00009c  42a3              CMP      r3,r4
00009e  d001              BEQ      |L1.164|
;;;168    	  return false;
0000a0  2000              MOVS     r0,#0
;;;169      }
;;;170      return true;
;;;171    }
0000a2  bd10              POP      {r4,pc}
                  |L1.164|
0000a4  1c52              ADDS     r2,r2,#1              ;166
0000a6  2a06              CMP      r2,#6                 ;166
0000a8  dbf6              BLT      |L1.152|
0000aa  2001              MOVS     r0,#1                 ;170
0000ac  bd10              POP      {r4,pc}
;;;172    
                          ENDP

                  filter_pass PROC
;;;173    int filter_pass(void) {
0000ae  b570              PUSH     {r4-r6,lr}
;;;174    
;;;175       if (!synchro)
0000b0  4cd3              LDR      r4,|L1.1024|
0000b2  7820              LDRB     r0,[r4,#0]  ; synchro
0000b4  2800              CMP      r0,#0
0000b6  d017              BEQ      |L1.232|
;;;176         return true;
;;;177    
;;;178       if(! same_mac(FRAMEr->source,HostMAC)) {
0000b8  4dd2              LDR      r5,|L1.1028|
0000ba  f104011e          ADD      r1,r4,#0x1e
0000be  1da8              ADDS     r0,r5,#6
0000c0  f7fffffe          BL       same_mac
0000c4  b908              CBNZ     r0,|L1.202|
;;;179    #if ETHERNET_DEBUG
;;;180    	 print("Frame from different MAC: Filtered out!\n");
0000c6  a0d0              ADR      r0,|L1.1032|
;;;181    #endif   	
;;;182         return false;
0000c8  e00a              B        |L1.224|
                  |L1.202|
;;;183       }
;;;184       if(PACKETr->destport != DestPort) {
0000ca  8ca8              LDRH     r0,[r5,#0x24]  ; rxbuffer
0000cc  88a1              LDRH     r1,[r4,#4]  ; DestPort
0000ce  4288              CMP      r0,r1
0000d0  d001              BEQ      |L1.214|
;;;185    #if ETHERNET_DEBUG
;;;186    	 print("Packet from different Destination Port: Filtered out!\n");
0000d2  a0d8              ADR      r0,|L1.1076|
;;;187    #endif 
;;;188         return false;
0000d4  e004              B        |L1.224|
                  |L1.214|
;;;189       }
;;;190       if(PACKETr->srcport != SrcPort) {
0000d6  8c68              LDRH     r0,[r5,#0x22]  ; rxbuffer
0000d8  88e1              LDRH     r1,[r4,#6]  ; SrcPort
0000da  4288              CMP      r0,r1
0000dc  d004              BEQ      |L1.232|
;;;191    #if ETHERNET_DEBUG
;;;192    	 print("Packet to different Source Port: Filtered out!\n");
0000de  a0e3              ADR      r0,|L1.1132|
                  |L1.224|
0000e0  f7fffffe          BL       print
;;;193    #endif 
;;;194         return false;
0000e4  2000              MOVS     r0,#0
;;;195       }
;;;196       return true;
;;;197    }
0000e6  bd70              POP      {r4-r6,pc}
                  |L1.232|
0000e8  2001              MOVS     r0,#1                 ;196
0000ea  bd70              POP      {r4-r6,pc}
;;;198    
                          ENDP

                  WriteFrame_EMAC PROC
;;;199    void WriteFrame_EMAC(unsigned short Data)
0000ec  4bc4              LDR      r3,|L1.1024|
;;;200    {
;;;201      *txptr++ = Data;
0000ee  6919              LDR      r1,[r3,#0x10]  ; txptr
0000f0  1c8a              ADDS     r2,r1,#2
0000f2  8008              STRH     r0,[r1,#0]
;;;202    }
0000f4  611a              STR      r2,[r3,#0x10]  ; txptr
0000f6  4770              BX       lr
;;;203    
                          ENDP

                  CopyToFrame_EMAC PROC
;;;204    void CopyToFrame_EMAC(void *Source, unsigned int Size)
0000f8  b530              PUSH     {r4,r5,lr}
;;;205    {
;;;206      unsigned short * piSource;
;;;207    
;;;208      piSource = Source;
0000fa  4604              MOV      r4,r0
;;;209      Size = (Size + 1) & 0xFFFE;    
0000fc  1c49              ADDS     r1,r1,#1
0000fe  f64f70fe          MOV      r0,#0xfffe
000102  ea010500          AND      r5,r1,r0
;;;210      while (Size > 0) {
000106  e004              B        |L1.274|
                  |L1.264|
;;;211        WriteFrame_EMAC(*piSource++);
000108  f8340b02          LDRH     r0,[r4],#2
00010c  f7fffffe          BL       WriteFrame_EMAC
;;;212        Size -= 2;
000110  1ead              SUBS     r5,r5,#2
                  |L1.274|
000112  2d00              CMP      r5,#0                 ;210
000114  d1f8              BNE      |L1.264|
;;;213      }
;;;214    }
000116  bd30              POP      {r4,r5,pc}
;;;215    
                          ENDP

                  chksum16 PROC
;;;216    int chksum16(void *buf1, short len) {
000118  b510              PUSH     {r4,lr}
;;;217      unsigned short * buf = buf1;
;;;218      int chksum16, chksum=0;
00011a  2300              MOVS     r3,#0
;;;219    
;;;220      while(len > 0) {	
00011c  e00d              B        |L1.314|
                  |L1.286|
;;;221        if (len == 1)
;;;222          chksum16 = ((*buf)&0x00FF);
00011e  8802              LDRH     r2,[r0,#0]
000120  2901              CMP      r1,#1                 ;221
000122  d101              BNE      |L1.296|
000124  b2d2              UXTB     r2,r2
000126  e7ff              B        |L1.296|
                  |L1.296|
;;;223        else
;;;224          chksum16 = (*buf);
;;;225        chksum = chksum + HTONS(chksum16);
000128  b2d4              UXTB     r4,r2
00012a  f3c22207          UBFX     r2,r2,#8,#8
;;;226        *buf++;
00012e  1c80              ADDS     r0,r0,#2
000130  ea422204          ORR      r2,r2,r4,LSL #8       ;225
;;;227        len -=2;
000134  1e89              SUBS     r1,r1,#2
000136  4413              ADD      r3,r3,r2              ;225
000138  b209              SXTH     r1,r1
                  |L1.314|
00013a  2900              CMP      r1,#0                 ;220
00013c  dcef              BGT      |L1.286|
;;;228      }
;;;229      return (~(chksum + ((chksum & 0xFFFF0000) >> 16))&0xFFFF);
00013e  eb034013          ADD      r0,r3,r3,LSR #16
000142  43c0              MVNS     r0,r0
000144  b280              UXTH     r0,r0
;;;230    }
000146  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  init_emac PROC
;;;234    //*****************************************************//
;;;235    void init_emac(void)  {
000148  e92d47f0          PUSH     {r4-r10,lr}
;;;236      unsigned int regv,tout,id1,id2,i;
;;;237    
;;;238      synchro = false;
00014c  4dac              LDR      r5,|L1.1024|
00014e  2600              MOVS     r6,#0
;;;239    
;;;240    #if LED_ENABLED
;;;241      /* configure activity LED pin as output */
;;;242      LPC_GPIO2->FIODIR |= (1UL << PORT2_PIN);
000150  4fd2              LDR      r7,|L1.1180|
000152  702e              STRB     r6,[r5,#0]            ;238
000154  6c38              LDR      r0,[r7,#0x40]
000156  f0400040          ORR      r0,r0,#0x40
00015a  6438              STR      r0,[r7,#0x40]
;;;243    #endif
;;;244    
;;;245    #if ETHERNET_DEBUG
;;;246      UART_init(57600);
00015c  f44f4061          MOV      r0,#0xe100
000160  f7fffffe          BL       UART_init
;;;247      print("Ethernet Secondary Bootloader: Target in debug mode\n");
000164  a0ce              ADR      r0,|L1.1184|
000166  f7fffffe          BL       print
00016a  48db              LDR      r0,|L1.1240|
;;;248    #endif 
;;;249    
;;;250      /* Power Up the EMAC controller. */
;;;251      LPC_SC->PCONP |= 0x40000000;
00016c  6801              LDR      r1,[r0,#0]
00016e  f0414180          ORR      r1,r1,#0x40000000
000172  6001              STR      r1,[r0,#0]
;;;252    
;;;253      /* configure ethernet pins */
;;;254      LPC_PINCON->PINSEL2 = 0x50150105;
000174  4cda              LDR      r4,|L1.1248|
000176  48d9              LDR      r0,|L1.1244|
000178  60a0              STR      r0,[r4,#8]
;;;255    
;;;256      /* if device is an LPC175x then configure pins to use software */
;;;257      /* based MIIM/MDIO */
;;;258      if (is_LPC175x())
00017a  f7fffffe          BL       is_LPC175x
00017e  b150              CBZ      r0,|L1.406|
;;;259      {
;;;260        dev_175x = TRUE;
000180  2001              MOVS     r0,#1
;;;261        /* use P2.8 for MDC and P2.9 for MDIO */
;;;262        LPC_PINCON->PINSEL4 &= ~0x000F0000;
000182  60a8              STR      r0,[r5,#8]  ; dev_175x
000184  6920              LDR      r0,[r4,#0x10]
000186  f4202070          BIC      r0,r0,#0xf0000
00018a  6120              STR      r0,[r4,#0x10]
;;;263        LPC_GPIO2->FIODIR |= MDC;
00018c  6c38              LDR      r0,[r7,#0x40]
00018e  f4407080          ORR      r0,r0,#0x100
000192  6438              STR      r0,[r7,#0x40]
000194  e005              B        |L1.418|
                  |L1.406|
;;;264      }
;;;265      else
;;;266      {
;;;267        dev_175x = FALSE;
;;;268        /* configure pins for RMII and MIIM */
;;;269        LPC_PINCON->PINSEL3 = (LPC_PINCON->PINSEL3 & ~0x0000000F) | 0x00000005;
000196  60ae              STR      r6,[r5,#8]  ; dev_175x
000198  68e0              LDR      r0,[r4,#0xc]
00019a  f020000f          BIC      r0,r0,#0xf
00019e  1d40              ADDS     r0,r0,#5
0001a0  60e0              STR      r0,[r4,#0xc]
                  |L1.418|
;;;270      }
;;;271      
;;;272      /* Reset all EMAC internal modules. */
;;;273      LPC_EMAC->MAC1    = MAC1_RES_TX | MAC1_RES_MCS_TX | MAC1_RES_RX | MAC1_RES_MCS_RX |
0001a2  f44f404f          MOV      r0,#0xcf00
0001a6  f04f45a0          MOV      r5,#0x50000000
0001aa  6028              STR      r0,[r5,#0]
;;;274                          MAC1_SIM_RES | MAC1_SOFT_RES;
;;;275      LPC_EMAC->Command = CR_REG_RES | CR_TX_RES | CR_RX_RES;
0001ac  2038              MOVS     r0,#0x38
0001ae  f8c50100          STR      r0,[r5,#0x100]
;;;276    
;;;277      /* A short delay after reset. */
;;;278      for (tout = 100; tout; tout--);
0001b2  2464              MOVS     r4,#0x64
                  |L1.436|
0001b4  1e64              SUBS     r4,r4,#1
0001b6  d1fd              BNE      |L1.436|
;;;279    
;;;280      /* Initialize MAC control registers. */
;;;281      LPC_EMAC->MAC1 = MAC1_PASS_ALL;
0001b8  f04f0902          MOV      r9,#2
0001bc  f8c59000          STR      r9,[r5,#0]
;;;282      LPC_EMAC->MAC2 = MAC2_CRC_EN | MAC2_PAD_EN;
0001c0  2030              MOVS     r0,#0x30
0001c2  6068              STR      r0,[r5,#4]
;;;283      LPC_EMAC->MAXF = ETH_MAX_FLEN;
0001c4  f24050f2          MOV      r0,#0x5f2
0001c8  6168              STR      r0,[r5,#0x14]
;;;284      LPC_EMAC->CLRT = CLRT_DEF;
0001ca  f243700f          MOV      r0,#0x370f
0001ce  6128              STR      r0,[r5,#0x10]
;;;285      LPC_EMAC->IPGR = IPGR_DEF;
0001d0  2712              MOVS     r7,#0x12
0001d2  60ef              STR      r7,[r5,#0xc]
;;;286    
;;;287      /* Enable Reduced MII interface. */
;;;288      LPC_EMAC->Command = CR_RMII | CR_PASS_RUNT_FRM;
0001d4  0178              LSLS     r0,r7,#5
0001d6  f8c50100          STR      r0,[r5,#0x100]
;;;289    
;;;290      /* Put the PHY chip in reset mode */
;;;291      write_PHY (PHY_REG_BMCR, 0x8000);
0001da  f44f4100          MOV      r1,#0x8000
0001de  2000              MOVS     r0,#0
0001e0  f7fffffe          BL       write_PHY
;;;292    
;;;293      /* Wait for hardware reset to end. */
;;;294      for (tout = 0; tout < 0x100000; tout++) {
0001e4  f44f1880          MOV      r8,#0x100000
                  |L1.488|
;;;295        regv = read_PHY (PHY_REG_BMCR);
0001e8  2000              MOVS     r0,#0
0001ea  f7fffffe          BL       read_PHY
;;;296        if (!(regv & 0x8000)) {
0001ee  0400              LSLS     r0,r0,#16
0001f0  d502              BPL      |L1.504|
0001f2  1c64              ADDS     r4,r4,#1              ;294
0001f4  4544              CMP      r4,r8                 ;294
0001f6  d3f7              BCC      |L1.488|
                  |L1.504|
;;;297          /* Reset complete */
;;;298          break;
;;;299        }
;;;300      }
;;;301     
;;;302      /* MII Mgmt Configuration register and MII Mgnt hardware Reset       */
;;;303      /* host clock divided by 20, no suppress preamble, no scan increment */
;;;304      LPC_EMAC->MCFG = HOST_CLK_BY_20 | MCFG_RES_MII;	
0001f8  f2480018          MOV      r0,#0x8018
0001fc  6228              STR      r0,[r5,#0x20]
;;;305      for ( i = 0; i < 0x40; i++ );
0001fe  2000              MOVS     r0,#0
                  |L1.512|
000200  1c40              ADDS     r0,r0,#1
000202  2840              CMP      r0,#0x40
000204  d3fc              BCC      |L1.512|
;;;306      LPC_EMAC->MCFG &= (~MCFG_RES_MII);	/* Clear the reset */
000206  6a28              LDR      r0,[r5,#0x20]
000208  f4204000          BIC      r0,r0,#0x8000
00020c  6228              STR      r0,[r5,#0x20]
;;;307      LPC_EMAC->MCMD = 0;	
00020e  626e              STR      r6,[r5,#0x24]
;;;308    
;;;309    #if(PHY_CHIP==0)  //National PHY
;;;310      /* Check if this is a DP83848C PHY. */
;;;311      id1 = read_PHY (PHY_REG_IDR1);
000210  2002              MOVS     r0,#2
000212  f7fffffe          BL       read_PHY
000216  4604              MOV      r4,r0
;;;312      id2 = read_PHY (PHY_REG_IDR2);
000218  2003              MOVS     r0,#3
00021a  f7fffffe          BL       read_PHY
;;;313      if (((id1 << 16) | (id2 & 0xFFF0)) == DP83848C_ID) {
00021e  f64f71f0          MOV      r1,#0xfff0
000222  4008              ANDS     r0,r0,r1
000224  49af              LDR      r1,|L1.1252|
000226  ea404004          ORR      r0,r0,r4,LSL #16
00022a  4288              CMP      r0,r1
00022c  d10d              BNE      |L1.586|
;;;314        /* Configure the PHY device */
;;;315    
;;;316        /* Use autonegotiation about the link speed. */
;;;317        write_PHY (PHY_REG_BMCR, PHY_AUTO_NEG);
00022e  f44f5140          MOV      r1,#0x3000
000232  2000              MOVS     r0,#0
000234  f7fffffe          BL       write_PHY
;;;318        /* Wait to complete Auto_Negotiation. */
;;;319        for (tout = 0; tout < 0x100000; tout++) {
000238  2400              MOVS     r4,#0
                  |L1.570|
;;;320          regv = read_PHY (PHY_REG_BMSR);
00023a  2001              MOVS     r0,#1
00023c  f7fffffe          BL       read_PHY
;;;321          if (regv & 0x0020) {
000240  0680              LSLS     r0,r0,#26
000242  d402              BMI      |L1.586|
000244  1c64              ADDS     r4,r4,#1              ;319
000246  4544              CMP      r4,r8                 ;319
000248  d3f7              BCC      |L1.570|
                  |L1.586|
;;;322            /* Autonegotiation Complete. */
;;;323            break;
;;;324          }
;;;325        }
;;;326      }
;;;327      
;;;328      /* Check the link status. */
;;;329      for (tout = 0; tout < 0x10000; tout++) {
00024a  2400              MOVS     r4,#0
00024c  f44f3880          MOV      r8,#0x10000
                  |L1.592|
;;;330        regv = read_PHY (PHY_REG_STS);
000250  2010              MOVS     r0,#0x10
000252  f7fffffe          BL       read_PHY
;;;331        if (regv & 0x0001) {
000256  07c1              LSLS     r1,r0,#31
000258  d102              BNE      |L1.608|
00025a  1c64              ADDS     r4,r4,#1              ;329
00025c  4544              CMP      r4,r8                 ;329
00025e  d3f7              BCC      |L1.592|
                  |L1.608|
;;;332          /* Link is on. */
;;;333          break;
;;;334        }
;;;335      }
;;;336    
;;;337      /* Configure Full/Half Duplex mode. */
;;;338      if (regv & 0x0004) {
000260  0741              LSLS     r1,r0,#29
000262  d50c              BPL      |L1.638|
;;;339        /* Full duplex is enabled. */
;;;340        LPC_EMAC->MAC2    |= MAC2_FULL_DUP;
000264  6869              LDR      r1,[r5,#4]
000266  f0410101          ORR      r1,r1,#1
00026a  6069              STR      r1,[r5,#4]
;;;341        LPC_EMAC->Command |= CR_FULL_DUP;
00026c  f8d52100          LDR      r2,[r5,#0x100]
;;;342        LPC_EMAC->IPGT     = IPGT_FULL_DUP;
000270  2115              MOVS     r1,#0x15
000272  f4426280          ORR      r2,r2,#0x400          ;341
000276  f8c52100          STR      r2,[r5,#0x100]        ;341
00027a  60a9              STR      r1,[r5,#8]
00027c  e000              B        |L1.640|
                  |L1.638|
;;;343      }
;;;344      else {
;;;345        /* Half duplex mode. */
;;;346        LPC_EMAC->IPGT = IPGT_HALF_DUP;
00027e  60af              STR      r7,[r5,#8]
                  |L1.640|
;;;347      }
;;;348    
;;;349      /* Configure 100MBit/10MBit mode. */
;;;350      if (regv & 0x0002) {
000280  0780              LSLS     r0,r0,#30
000282  d501              BPL      |L1.648|
;;;351        /* 10MBit mode. */
;;;352        LPC_EMAC->SUPP = 0;
000284  61ae              STR      r6,[r5,#0x18]
000286  e002              B        |L1.654|
                  |L1.648|
;;;353      }
;;;354      else {
;;;355        /* 100MBit mode. */
;;;356        LPC_EMAC->SUPP = SUPP_SPEED;
000288  f44f7080          MOV      r0,#0x100
00028c  61a8              STR      r0,[r5,#0x18]
                  |L1.654|
;;;357      }
;;;358    #endif
;;;359    
;;;360    #if(PHY_CHIP==1)  //Other PHY
;;;361      /* Initialization code for other PHY */
;;;362    
;;;363    
;;;364    #endif
;;;365    
;;;366      /* Set the Ethernet MAC Address registers */
;;;367      LPC_EMAC->SA0 = (MYMAC_1 << 8) | MYMAC_2;
00028e  f241001f          MOV      r0,#0x101f
000292  6428              STR      r0,[r5,#0x40]
;;;368      LPC_EMAC->SA1 = (MYMAC_3 << 8) | MYMAC_4;
000294  f24e0012          MOV      r0,#0xe012
000298  6468              STR      r0,[r5,#0x44]
;;;369      LPC_EMAC->SA2 = (MYMAC_5 << 8) | MYMAC_6;
00029a  f641500c          MOV      r0,#0x1d0c
00029e  64a8              STR      r0,[r5,#0x48]
;;;370    
;;;371      /* save the Ethernet MAC Address to MyMAC[] */
;;;372      MyMAC[0] = MYMAC_6;
0002a0  4857              LDR      r0,|L1.1024|
0002a2  210c              MOVS     r1,#0xc
0002a4  3018              ADDS     r0,r0,#0x18
0002a6  7001              STRB     r1,[r0,#0]
;;;373      MyMAC[1] = MYMAC_5;
0002a8  211d              MOVS     r1,#0x1d
0002aa  7041              STRB     r1,[r0,#1]
;;;374      MyMAC[2] = MYMAC_4;
0002ac  7087              STRB     r7,[r0,#2]
;;;375      MyMAC[3] = MYMAC_3;
0002ae  21e0              MOVS     r1,#0xe0
0002b0  70c1              STRB     r1,[r0,#3]
;;;376      MyMAC[4] = MYMAC_2;
0002b2  211f              MOVS     r1,#0x1f
0002b4  7101              STRB     r1,[r0,#4]
;;;377      MyMAC[5] = MYMAC_1;
0002b6  2110              MOVS     r1,#0x10
0002b8  7141              STRB     r1,[r0,#5]
;;;378    
;;;379      /* Initialize Rx DMA Descriptors */
;;;380      for (i = 0; i < NUM_RX_FRAG; i++) {
;;;381        RX_DESC_PACKET(i)  = RX_BUF(i);
0002ba  4b8b              LDR      r3,|L1.1256|
;;;382        RX_DESC_CTRL(i)    = RCTRL_INT | (ETH_FRAG_SIZE-1);
0002bc  4c8b              LDR      r4,|L1.1260|
0002be  4a8c              LDR      r2,|L1.1264|
0002c0  2000              MOVS     r0,#0                 ;380
0002c2  bf00              NOP                            ;381
                  |L1.708|
0002c4  ebc01100          RSB      r1,r0,r0,LSL #4       ;381
0002c8  eb0307c1          ADD      r7,r3,r1,LSL #3       ;381
0002cc  eb0201c0          ADD      r1,r2,r0,LSL #3       ;381
;;;383        RX_STAT_INFO(i)    = 0;
;;;384        RX_STAT_HASHCRC(i) = 0;
0002d0  f8c160c8          STR      r6,[r1,#0xc8]
0002d4  e9c17400          STRD     r7,r4,[r1,#0]         ;380
0002d8  1c40              ADDS     r0,r0,#1              ;380
0002da  f8c160cc          STR      r6,[r1,#0xcc]         ;380
0002de  2819              CMP      r0,#0x19              ;380
0002e0  d3f0              BCC      |L1.708|
;;;385      }
;;;386      /* Set EMAC Receive Descriptor Registers. */
;;;387      LPC_EMAC->RxDescriptor       = RX_DESC_BASE;
0002e2  f8c52108          STR      r2,[r5,#0x108]
;;;388      LPC_EMAC->RxStatus           = RX_STAT_BASE;
0002e6  4882              LDR      r0,|L1.1264|
0002e8  30c8              ADDS     r0,r0,#0xc8
0002ea  f8c5010c          STR      r0,[r5,#0x10c]
;;;389      LPC_EMAC->RxDescriptorNumber = NUM_RX_FRAG-1;
0002ee  2018              MOVS     r0,#0x18
0002f0  f8c50110          STR      r0,[r5,#0x110]
;;;390      /* Rx Descriptors Point to 0 */
;;;391      LPC_EMAC->RxConsumeIndex  = 0;
0002f4  f8c56118          STR      r6,[r5,#0x118]
;;;392    
;;;393      /* Initialize Tx DMA Descriptors */
;;;394      for (i = 0; i < NUM_TX_FRAG; i++) {
;;;395        TX_DESC_PACKET(i) = TX_BUF(i);
0002f8  4b7e              LDR      r3,|L1.1268|
0002fa  2000              MOVS     r0,#0                 ;394
                  |L1.764|
0002fc  ebc01100          RSB      r1,r0,r0,LSL #4
000300  eb0304c1          ADD      r4,r3,r1,LSL #3
000304  eb0201c0          ADD      r1,r2,r0,LSL #3
;;;396        TX_DESC_CTRL(i)   = 0;
;;;397        TX_STAT_INFO(i)   = 0;
000308  f50171c8          ADD      r1,r1,#0x190
00030c  c150              STM      r1!,{r4,r6}
00030e  eb020180          ADD      r1,r2,r0,LSL #2
000312  1c40              ADDS     r0,r0,#1              ;394
000314  f8c161a8          STR      r6,[r1,#0x1a8]        ;394
000318  2803              CMP      r0,#3                 ;394
00031a  d3ef              BCC      |L1.764|
;;;398      }
;;;399      /* Set EMAC Transmit Descriptor Registers. */
;;;400      LPC_EMAC->TxDescriptor       = TX_DESC_BASE;
00031c  4872              LDR      r0,|L1.1256|
00031e  3824              SUBS     r0,r0,#0x24
000320  35ac              ADDS     r5,r5,#0xac
000322  6728              STR      r0,[r5,#0x70]
;;;401      LPC_EMAC->TxStatus           = TX_STAT_BASE;
000324  4870              LDR      r0,|L1.1256|
000326  380c              SUBS     r0,r0,#0xc
000328  6768              STR      r0,[r5,#0x74]
;;;402      LPC_EMAC->TxDescriptorNumber = NUM_TX_FRAG-1;
00032a  f8c59078          STR      r9,[r5,#0x78]
;;;403      /* Tx Descriptors Point to 0 */
;;;404      LPC_EMAC->TxProduceIndex  = 0;
00032e  67ee              STR      r6,[r5,#0x7c]
;;;405    
;;;406      /* Receive Broadcast and Perfect Match Packets */
;;;407      LPC_EMAC->RxFilterCtrl = RFC_PERFECT_EN;  
000330  2020              MOVS     r0,#0x20
000332  f8c50154          STR      r0,[r5,#0x154]
;;;408    
;;;409      /* Enable EMAC interrupts. */
;;;410      LPC_EMAC->IntEnable = INT_RX_DONE | INT_TX_DONE;
000336  2088              MOVS     r0,#0x88
000338  f8c50f38          STR      r0,[r5,#0xf38]
;;;411    
;;;412      /* Reset all interrupts */
;;;413      LPC_EMAC->IntClear  = 0xFFFF;
00033c  f64f70ff          MOV      r0,#0xffff
000340  f8c50f3c          STR      r0,[r5,#0xf3c]
;;;414    
;;;415      /* Enable receive and transmit mode of MAC Ethernet core */
;;;416      LPC_EMAC->Command  |= (CR_RX_EN | CR_TX_EN);
000344  6d68              LDR      r0,[r5,#0x54]
000346  f0400003          ORR      r0,r0,#3
00034a  6568              STR      r0,[r5,#0x54]
;;;417      LPC_EMAC->MAC1     |= MAC1_REC_EN;
00034c  f8550dac          LDR      r0,[r5,#-0xac]!
;;;418    
;;;419      /* Complete some IP & UDP header values */
;;;420      txbuffer[12] = 0x08;
000350  2108              MOVS     r1,#8
000352  f0400001          ORR      r0,r0,#1              ;417
000356  6028              STR      r0,[r5,#0]            ;417
000358  482a              LDR      r0,|L1.1028|
00035a  3078              ADDS     r0,r0,#0x78
00035c  7301              STRB     r1,[r0,#0xc]
;;;421      txbuffer[13] = 0x00;
00035e  7346              STRB     r6,[r0,#0xd]
;;;422      txbuffer[14] = 0x45;
000360  2145              MOVS     r1,#0x45
000362  7381              STRB     r1,[r0,#0xe]
;;;423      txbuffer[15] = 0x00;
000364  73c6              STRB     r6,[r0,#0xf]
;;;424      txbuffer[18] = 0xD8;
000366  21d8              MOVS     r1,#0xd8
000368  7481              STRB     r1,[r0,#0x12]
;;;425      txbuffer[19] = 0xF4;
00036a  21f4              MOVS     r1,#0xf4
00036c  74c1              STRB     r1,[r0,#0x13]
;;;426      txbuffer[20] = 0x00;
00036e  7506              STRB     r6,[r0,#0x14]
;;;427      txbuffer[21] = 0x00;
000370  7546              STRB     r6,[r0,#0x15]
;;;428      txbuffer[22] = 0x80;
000372  2180              MOVS     r1,#0x80
000374  7581              STRB     r1,[r0,#0x16]
;;;429      txbuffer[23] = 0x11;
000376  2111              MOVS     r1,#0x11
000378  75c1              STRB     r1,[r0,#0x17]
                  |L1.890|
;;;430    }
00037a  e8bd87f0          POP      {r4-r10,pc}
;;;431    
                          ENDP

                  emac_getline PROC
;;;433    // returns 0 if packet received, 1 if timeout
;;;434    unsigned emac_getline(char * buf,int max_len,int * count) {
00037e  e92d5ff0          PUSH     {r4-r12,lr}
000382  4605              MOV      r5,r0
000384  4689              MOV      r9,r1
000386  4693              MOV      r11,r2
;;;435      unsigned short RxLen;
;;;436      unsigned int idx, i;
;;;437    
;;;438    #if ETHERNET_DEBUG
;;;439      int j;
;;;440    #endif
;;;441    
;;;442    #if LED_ENABLED
;;;443      int k=0;
000388  2400              MOVS     r4,#0
;;;444    #endif
;;;445     
;;;446      /* get timestamp for end of timeout period */
;;;447      ethernet_timeout = Timer_GetTimestamp() + ETHERNET_TIMEOUT;
00038a  f7fffffe          BL       Timer_GetTimestamp
00038e  f64e2160          MOV      r1,#0xea60
000392  f8dfa06c          LDR      r10,|L1.1024|
000396  4401              ADD      r1,r1,r0
;;;448    
;;;449      /* Check for Received frames */
;;;450      while(1){
;;;451        while(LPC_EMAC->RxConsumeIndex == LPC_EMAC->RxProduceIndex){
000398  f04f48a0          MOV      r8,#0x50000000
;;;452    #if LED_ENABLED
;;;453        // FIXME
;;;454        /* increment the counter and check timeout  */
;;;455    	  if (k++ > 200000) {
;;;456    	     k=0;
;;;457    		   /* toogle the LED           */
;;;458    	     if (LPC_GPIO2->FIOPIN & (1<<PORT2_PIN))
;;;459    	       LPC_GPIO2->FIOCLR |= (1<<PORT2_PIN);
;;;460    	     else
;;;461    	       LPC_GPIO2->FIOSET |= (1<<PORT2_PIN);
;;;462    	  }
;;;463    #endif
;;;464    
;;;465    	  /* no filtered packets received during timeout period */
;;;466          if (Timer_HasTimestampExpired(ethernet_timeout))
;;;467    	  {
;;;468    #if ETHERNET_DEBUG
;;;469            print("Timed out - going back to looking for handshake\n");
;;;470    #endif
;;;471    	    return 1;
00039c  f8ca1014          STR      r1,[r10,#0x14]  ; ethernet_timeout
0003a0  e01d              B        |L1.990|
                  |L1.930|
0003a2  4620              MOV      r0,r4                 ;455
0003a4  4954              LDR      r1,|L1.1272|
0003a6  1c64              ADDS     r4,r4,#1              ;455
0003a8  4288              CMP      r0,r1                 ;455
0003aa  dd0d              BLE      |L1.968|
0003ac  483b              LDR      r0,|L1.1180|
0003ae  2400              MOVS     r4,#0                 ;456
0003b0  6d41              LDR      r1,[r0,#0x54]         ;458
0003b2  0649              LSLS     r1,r1,#25             ;458
0003b4  d504              BPL      |L1.960|
0003b6  6dc1              LDR      r1,[r0,#0x5c]         ;459
0003b8  f0410140          ORR      r1,r1,#0x40           ;459
0003bc  65c1              STR      r1,[r0,#0x5c]         ;459
0003be  e003              B        |L1.968|
                  |L1.960|
0003c0  6d81              LDR      r1,[r0,#0x58]         ;461
0003c2  f0410140          ORR      r1,r1,#0x40           ;461
0003c6  6581              STR      r1,[r0,#0x58]         ;461
                  |L1.968|
0003c8  f8da0014          LDR      r0,[r10,#0x14]        ;466  ; ethernet_timeout
0003cc  f7fffffe          BL       Timer_HasTimestampExpired
0003d0  b128              CBZ      r0,|L1.990|
0003d2  a04a              ADR      r0,|L1.1276|
0003d4  f7fffffe          BL       print
0003d8  2001              MOVS     r0,#1
                  |L1.986|
;;;472    	  }
;;;473        }
;;;474    
;;;475        idx = LPC_EMAC->RxConsumeIndex;
;;;476    
;;;477        /* check for crc error */
;;;478    	if (RX_STAT_INFO(idx) & RINFO_CRC_ERR)
;;;479    	{
;;;480    #if ETHERNET_DEBUG
;;;481          print("Rx CRC error\n");
;;;482    #endif
;;;483          /* ignore frame */
;;;484          if (++idx == NUM_RX_FRAG)
;;;485      	  idx = 0;   
;;;486    	    LPC_EMAC->RxConsumeIndex = idx;
;;;487          continue;
;;;488    	}
;;;489    
;;;490        /* Get the Length and a pointer to the data  */
;;;491        RxLen = (RX_STAT_INFO(idx) & RINFO_SIZE) - 3;				 
;;;492        rxptr = (unsigned short *)RX_DESC_PACKET(idx);
;;;493        CopyFromFrame_EMAC(rxbuffer, RxLen);
;;;494        if (++idx == NUM_RX_FRAG)
;;;495    	  idx = 0;   
;;;496    	  LPC_EMAC->RxConsumeIndex = idx;
;;;497        if(filter_pass())
;;;498          break;
;;;499      } 
;;;500      /* limit incoming data for protection  */
;;;501      if ((RxLen-42) > max_len)
;;;502        RxLen = max_len + 42;
;;;503      memcpy(buf,PAYLOADr->data,RxLen-42);
;;;504    
;;;505      /* detect '0x0A' (string terminator) and replace it by CR+LF  */
;;;506      for(i=0;i<max_len;i++) {
;;;507        if(buf[i]==CR){
;;;508    	  buf[i]='\0';
;;;509    	  break;
;;;510    	}
;;;511      }
;;;512      (*count) = i;
;;;513    
;;;514    #if ETHERNET_DEBUG
;;;515      /* print received command   */
;;;516      print("Rx:  ");
;;;517      if (RxLen > 60) {
;;;518    	print("...Data...");
;;;519      }else{
;;;520        j=0;
;;;521        for(i=0; i<(*count); i++) {
;;;522    	  printascii(buf[i]);
;;;523          j++;
;;;524          if (j==16) {
;;;525            j=0;
;;;526            print("\r\n     ");
;;;527          }
;;;528        }
;;;529      }
;;;530      print("\r\n-------------------\r\n");
;;;531    #endif
;;;532    
;;;533        // reset timestamp for end of timeout period
;;;534        ethernet_timeout = Timer_GetTimestamp() + ETHERNET_TIMEOUT;
;;;535    
;;;536        return (0);
;;;537    }
0003da  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.990|
0003de  f8d81118          LDR      r1,[r8,#0x118]        ;451
0003e2  4640              MOV      r0,r8                 ;451
0003e4  f8d82114          LDR      r2,[r8,#0x114]        ;451
0003e8  4291              CMP      r1,r2                 ;451
0003ea  d0da              BEQ      |L1.930|
0003ec  f8d07118          LDR      r7,[r0,#0x118]        ;475
0003f0  4680              MOV      r8,r0                 ;475
0003f2  483f              LDR      r0,|L1.1264|
0003f4  eb0000c7          ADD      r0,r0,r7,LSL #3       ;478
0003f8  f8d010c8          LDR      r1,[r0,#0xc8]         ;478
0003fc  020a              LSLS     r2,r1,#8              ;478
0003fe  e097              B        |L1.1328|
                  |L1.1024|
                          DCD      ||.data||
                  |L1.1028|
                          DCD      ||.bss||
                  |L1.1032|
000408  4672616d652066726f6d20646966666572656e74204d41433a2046696c7465726564206f7574210a00        DCB      "Frame from different MAC: Filtered out!\n",0
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  5061636b65742066726f6d20646966666572656e742044657374696e6174696f6e20506f72743a2046696c7465726564206f7574210a        DCB      "Packet from different Destination Port: Filtered out!\n"
00046a  00                DCB      0
00046b  00                DCB      0
                  |L1.1132|
00046c  5061636b657420746f20646966666572656e7420536f7572636520506f72743a2046696c7465726564206f7574210a00        DCB      "Packet to different Source Port: Filtered out!\n",0
                  |L1.1180|
                          DCD      0x2009c000
                  |L1.1184|
0004a0  45746865726e6574205365636f6e6461727920426f6f746c6f616465723a2054617267657420696e206465627567206d6f64650a00        DCB      "Ethernet Secondary Bootloader: Target in debug mode\n",0
0004d5  00                DCB      0
0004d6  00                DCB      0
0004d7  00                DCB      0
                  |L1.1240|
                          DCD      0x400fc0c4
                  |L1.1244|
                          DCD      0x50150105
                  |L1.1248|
                          DCD      0x4002c000
                  |L1.1252|
                          DCD      0x20005c90
                  |L1.1256|
                          DCD      0x100041b4
                  |L1.1260|
                          DCD      0x80000077
                  |L1.1264|
                          DCD      0x10004000
                  |L1.1268|
                          DCD      0x10004d6c
                  |L1.1272|
                          DCD      0x00030d40
                  |L1.1276|
0004fc  54696d6564206f7574202d20676f696e67206261636b20746f206c6f6f6b696e6720666f722068616e647368616b650a00        DCB      "Timed out - going back to looking for handshake\n",0
00052d  00                DCB      0
00052e  00                DCB      0
00052f  00                DCB      0
                  |L1.1328|
000530  d509              BPL      |L1.1350|
000532  a0b2              ADR      r0,|L1.2044|
000534  f7fffffe          BL       print
000538  1c7f              ADDS     r7,r7,#1              ;484
00053a  2f19              CMP      r7,#0x19              ;484
00053c  d100              BNE      |L1.1344|
00053e  2700              MOVS     r7,#0                 ;485
                  |L1.1344|
000540  f8c87118          STR      r7,[r8,#0x118]        ;486
                  |L1.1348|
000544  e74b              B        |L1.990|
                  |L1.1350|
000546  f3c1010a          UBFX     r1,r1,#0,#11          ;491
00054a  1ec9              SUBS     r1,r1,#3              ;491
00054c  6800              LDR      r0,[r0,#0]            ;492
00054e  b28e              UXTH     r6,r1                 ;491
000550  f8ca000c          STR      r0,[r10,#0xc]         ;493  ; rxptr
000554  4631              MOV      r1,r6                 ;493
000556  48ad              LDR      r0,|L1.2060|
000558  f7fffffe          BL       CopyFromFrame_EMAC
00055c  1c7f              ADDS     r7,r7,#1              ;494
00055e  2f19              CMP      r7,#0x19              ;494
000560  d100              BNE      |L1.1380|
000562  2700              MOVS     r7,#0                 ;495
                  |L1.1380|
000564  f8c87118          STR      r7,[r8,#0x118]        ;496
000568  f7fffffe          BL       filter_pass
00056c  2800              CMP      r0,#0                 ;497
00056e  d0e9              BEQ      |L1.1348|
000570  f1a6002a          SUB      r0,r6,#0x2a           ;501
000574  4548              CMP      r0,r9                 ;501
000576  dd02              BLE      |L1.1406|
000578  f109002a          ADD      r0,r9,#0x2a           ;502
00057c  b286              UXTH     r6,r0                 ;502
                  |L1.1406|
00057e  49a3              LDR      r1,|L1.2060|
000580  f1a6022a          SUB      r2,r6,#0x2a           ;503
000584  312a              ADDS     r1,r1,#0x2a           ;503
000586  4628              MOV      r0,r5                 ;503
000588  f7fffffe          BL       __aeabi_memcpy
00058c  2000              MOVS     r0,#0                 ;506
00058e  e006              B        |L1.1438|
                  |L1.1424|
000590  5c29              LDRB     r1,[r5,r0]            ;507
000592  290d              CMP      r1,#0xd               ;507
000594  d102              BNE      |L1.1436|
000596  2100              MOVS     r1,#0                 ;508
000598  5429              STRB     r1,[r5,r0]            ;508
00059a  e002              B        |L1.1442|
                  |L1.1436|
00059c  1c40              ADDS     r0,r0,#1              ;506
                  |L1.1438|
00059e  4548              CMP      r0,r9                 ;506
0005a0  d3f6              BCC      |L1.1424|
                  |L1.1442|
0005a2  f8cb0000          STR      r0,[r11,#0]           ;516
0005a6  a09a              ADR      r0,|L1.2064|
0005a8  f7fffffe          BL       print
0005ac  2e3c              CMP      r6,#0x3c              ;517
0005ae  d903              BLS      |L1.1464|
0005b0  a099              ADR      r0,|L1.2072|
0005b2  f7fffffe          BL       print
0005b6  e011              B        |L1.1500|
                  |L1.1464|
0005b8  2400              MOVS     r4,#0                 ;520
0005ba  4626              MOV      r6,r4                 ;521
0005bc  e00a              B        |L1.1492|
                  |L1.1470|
0005be  5da8              LDRB     r0,[r5,r6]            ;522
0005c0  f7fffffe          BL       printascii
0005c4  1c64              ADDS     r4,r4,#1              ;523
0005c6  2c10              CMP      r4,#0x10              ;524
0005c8  d103              BNE      |L1.1490|
0005ca  2400              MOVS     r4,#0                 ;525
0005cc  a095              ADR      r0,|L1.2084|
0005ce  f7fffffe          BL       print
                  |L1.1490|
0005d2  1c76              ADDS     r6,r6,#1              ;521
                  |L1.1492|
0005d4  f8db0000          LDR      r0,[r11,#0]           ;521
0005d8  42b0              CMP      r0,r6                 ;521
0005da  d8f0              BHI      |L1.1470|
                  |L1.1500|
0005dc  a093              ADR      r0,|L1.2092|
0005de  f7fffffe          BL       print
0005e2  f7fffffe          BL       Timer_GetTimestamp
0005e6  f64e2160          MOV      r1,#0xea60            ;534
0005ea  4401              ADD      r1,r1,r0              ;534
0005ec  2000              MOVS     r0,#0                 ;536
0005ee  f8ca1014          STR      r1,[r10,#0x14]        ;536  ; ethernet_timeout
0005f2  e6f2              B        |L1.986|
;;;538    
                          ENDP

                  emac_sendline_crlf PROC
;;;539    unsigned emac_sendline_crlf(char * buf) {  
0005f4  e92d47f0          PUSH     {r4-r10,lr}
0005f8  4606              MOV      r6,r0
;;;540      int i;
;;;541      unsigned int idx;
;;;542    
;;;543    #if ETHERNET_DEBUG
;;;544      int j;
;;;545    #endif
;;;546    
;;;547      /* detect '\0' (string terminator) and replace it by CR+LF  */
;;;548      for(i=0;i<CMD_SIZE;i++) {
;;;549        PAYLOADt->data[i] = buf[i] ;			
0005fa  4c84              LDR      r4,|L1.2060|
0005fc  2000              MOVS     r0,#0                 ;548
0005fe  3478              ADDS     r4,r4,#0x78
                  |L1.1536|
000600  5c31              LDRB     r1,[r6,r0]
000602  1822              ADDS     r2,r4,r0
000604  f882102a          STRB     r1,[r2,#0x2a]
;;;550        if(buf[i]=='\0'){
000608  5c31              LDRB     r1,[r6,r0]
00060a  b931              CBNZ     r1,|L1.1562|
;;;551    	  PAYLOADt->data[i]=CR;
00060c  220d              MOVS     r2,#0xd
00060e  1821              ADDS     r1,r4,r0
000610  f8012f2a          STRB     r2,[r1,#0x2a]!
;;;552    	  PAYLOADt->data[i+1]=LF;
000614  220a              MOVS     r2,#0xa
000616  704a              STRB     r2,[r1,#1]
;;;553    	  break;
000618  e002              B        |L1.1568|
                  |L1.1562|
00061a  1c40              ADDS     r0,r0,#1              ;548
00061c  2846              CMP      r0,#0x46              ;548
00061e  dbef              BLT      |L1.1536|
                  |L1.1568|
;;;554    	}
;;;555      }
;;;556      data_size = i+2;
000620  f8df8220          LDR      r8,|L1.2116|
000624  1c80              ADDS     r0,r0,#2
000626  f8a80002          STRH     r0,[r8,#2]
;;;557    
;;;558    #if ETHERNET_DEBUG
;;;559      print("Tx:  ");
00062a  a087              ADR      r0,|L1.2120|
00062c  f7fffffe          BL       print
;;;560      j=0;
000630  2500              MOVS     r5,#0
;;;561      for(i=0; i<data_size-2; i++) {
000632  462f              MOV      r7,r5
000634  e00a              B        |L1.1612|
                  |L1.1590|
;;;562    	printascii(buf[i]);
000636  5df0              LDRB     r0,[r6,r7]
000638  f7fffffe          BL       printascii
;;;563        j++;
00063c  1c6d              ADDS     r5,r5,#1
;;;564        if (j==16) {
00063e  2d10              CMP      r5,#0x10
000640  d103              BNE      |L1.1610|
;;;565          j=0;
000642  2500              MOVS     r5,#0
;;;566          print("\r\n     ");
000644  a077              ADR      r0,|L1.2084|
000646  f7fffffe          BL       print
                  |L1.1610|
00064a  1c7f              ADDS     r7,r7,#1              ;561
                  |L1.1612|
00064c  f8b80002          LDRH     r0,[r8,#2]            ;561  ; data_size
000650  1e80              SUBS     r0,r0,#2              ;561
000652  4287              CMP      r7,r0                 ;561
000654  dbef              BLT      |L1.1590|
;;;567        }
;;;568      }
;;;569      print("\r\n-------------------\r\n");
000656  a075              ADR      r0,|L1.2092|
000658  f7fffffe          BL       print
;;;570    #endif
;;;571        
;;;572      idx  = LPC_EMAC->TxProduceIndex;
00065c  f04f49a0          MOV      r9,#0x50000000
000660  f8d95128          LDR      r5,[r9,#0x128]
;;;573      txptr = (unsigned short *)TX_DESC_PACKET(idx);
000664  487a              LDR      r0,|L1.2128|
000666  4646              MOV      r6,r8
000668  eb0000c5          ADD      r0,r0,r5,LSL #3
00066c  f8d01190          LDR      r1,[r0,#0x190]
;;;574      TX_DESC_CTRL(idx) = FrameSize | TCTRL_LAST;
000670  f8c81010          STR      r1,[r8,#0x10]  ; txptr
000674  f8b81002          LDRH     r1,[r8,#2]  ; data_size
;;;575      memcpy(FRAMEt->destination,FRAMEr->source,6);
000678  f8df8190          LDR      r8,|L1.2060|
00067c  312a              ADDS     r1,r1,#0x2a           ;574
00067e  f0414180          ORR      r1,r1,#0x40000000     ;574
000682  f8c01194          STR      r1,[r0,#0x194]
000686  2206              MOVS     r2,#6
000688  f1080106          ADD      r1,r8,#6
00068c  f1080078          ADD      r0,r8,#0x78
000690  f7fffffe          BL       __aeabi_memcpy
;;;576      memcpy(FRAMEt->source,MyMAC,6);
000694  496b              LDR      r1,|L1.2116|
000696  2206              MOVS     r2,#6
000698  3118              ADDS     r1,r1,#0x18
00069a  1da0              ADDS     r0,r4,#6
00069c  f7fffffe          BL       __aeabi_memcpy
;;;577      PACKETt->iplen = HTONS(FrameSize - EtherHdrLen);
0006a0  8870              LDRH     r0,[r6,#2]  ; data_size
;;;578      memcpy(PACKETt->destipaddr,PACKETr->srcipaddr,4);
0006a2  2204              MOVS     r2,#4
0006a4  301c              ADDS     r0,r0,#0x1c           ;577
0006a6  f3c02107          UBFX     r1,r0,#8,#8           ;577
0006aa  ea412000          ORR      r0,r1,r0,LSL #8       ;577
0006ae  8220              STRH     r0,[r4,#0x10]         ;577
0006b0  f108011a          ADD      r1,r8,#0x1a
0006b4  f101007c          ADD      r0,r1,#0x7c
0006b8  f7fffffe          BL       __aeabi_memcpy
;;;579      memcpy(PACKETt->srcipaddr,PACKETr->destipaddr,4);
0006bc  f108011e          ADD      r1,r8,#0x1e
0006c0  2204              MOVS     r2,#4
0006c2  f1010074          ADD      r0,r1,#0x74
0006c6  f7fffffe          BL       __aeabi_memcpy
;;;580      PACKETt->iphdrchksum = 0;
0006ca  f04f0c00          MOV      r12,#0
;;;581      PACKETt->iphdrchksum = HTONS(chksum16(PACKETt->fill1, IpHdrLen));
0006ce  f1080086          ADD      r0,r8,#0x86
0006d2  f8a4c018          STRH     r12,[r4,#0x18]        ;580
0006d6  2114              MOVS     r1,#0x14
0006d8  4682              MOV      r10,r0
0006da  f7fffffe          BL       chksum16
0006de  f3c02707          UBFX     r7,r0,#8,#8
0006e2  2114              MOVS     r1,#0x14
0006e4  4650              MOV      r0,r10
0006e6  f7fffffe          BL       chksum16
0006ea  ea472000          ORR      r0,r7,r0,LSL #8
0006ee  8320              STRH     r0,[r4,#0x18]
;;;582      PACKETt->destport = PACKETr->srcport;
0006f0  f8b80022          LDRH     r0,[r8,#0x22]  ; rxbuffer
0006f4  84a0              STRH     r0,[r4,#0x24]
;;;583      PACKETt->srcport = PACKETr->destport;
0006f6  f8b80024          LDRH     r0,[r8,#0x24]  ; rxbuffer
0006fa  8460              STRH     r0,[r4,#0x22]
;;;584      PACKETt->udplen = HTONS(FrameSize - EtherHdrLen - IpHdrLen);
0006fc  8871              LDRH     r1,[r6,#2]  ; data_size
0006fe  f1010008          ADD      r0,r1,#8
000702  f3c02207          UBFX     r2,r0,#8,#8
000706  ea422000          ORR      r0,r2,r0,LSL #8
00070a  84e0              STRH     r0,[r4,#0x26]
;;;585      PACKETt->udpchksum = 0;
00070c  f8a4c028          STRH     r12,[r4,#0x28]
;;;586      CopyToFrame_EMAC(&txbuffer[0], FrameSize);
000710  312a              ADDS     r1,r1,#0x2a
000712  f1080078          ADD      r0,r8,#0x78
000716  f7fffffe          BL       CopyToFrame_EMAC
;;;587      if (++idx == NUM_TX_FRAG) idx = 0;
00071a  1c6d              ADDS     r5,r5,#1
00071c  2d03              CMP      r5,#3
00071e  d100              BNE      |L1.1826|
000720  2500              MOVS     r5,#0
                  |L1.1826|
;;;588      LPC_EMAC->TxProduceIndex = idx;  
000722  f8c95128          STR      r5,[r9,#0x128]
;;;589      return (1);
000726  2001              MOVS     r0,#1
;;;590    }
000728  e627              B        |L1.890|
;;;591    
                          ENDP

                  emac_handshake PROC
;;;592    void emac_handshake(void) {
00072a  b530              PUSH     {r4,r5,lr}
;;;593    
;;;594       int count;
;;;595       char buf[15];
;;;596       char buf1[15];
;;;597    
;;;598       synchro = false;
00072c  4c45              LDR      r4,|L1.2116|
00072e  b089              SUB      sp,sp,#0x24           ;592
000730  2000              MOVS     r0,#0
000732  7020              STRB     r0,[r4,#0]
                  |L1.1844|
;;;599    
;;;600       while(1) {
;;;601         if (emac_getline(buf,1,&count) == 0) {
000734  aa08              ADD      r2,sp,#0x20
000736  2101              MOVS     r1,#1
000738  a804              ADD      r0,sp,#0x10
00073a  f7fffffe          BL       emac_getline
00073e  2800              CMP      r0,#0
000740  d1f8              BNE      |L1.1844|
;;;602           if (buf[0] == '?') {					  
000742  f89d0010          LDRB     r0,[sp,#0x10]
000746  283f              CMP      r0,#0x3f
000748  d1f4              BNE      |L1.1844|
;;;603      	     /* save Dest & Source Ports   */
;;;604     	     DestPort = PACKETr->destport;
00074a  4d30              LDR      r5,|L1.2060|
00074c  8ca8              LDRH     r0,[r5,#0x24]  ; rxbuffer
00074e  80a0              STRH     r0,[r4,#4]
;;;605    	     SrcPort  = PACKETr->srcport;
000750  8c68              LDRH     r0,[r5,#0x22]  ; rxbuffer
000752  80e0              STRH     r0,[r4,#6]
;;;606    
;;;607    #if ETHERNET_DEBUG
;;;608             /* print Dest & Source Ports   */
;;;609    	     print("Dest: ");
000754  a03f              ADR      r0,|L1.2132|
000756  f7fffffe          BL       print
;;;610    	     printhexa((DestPort>>8)&0xFF);
00075a  88a0              LDRH     r0,[r4,#4]  ; DestPort
00075c  0a00              LSRS     r0,r0,#8
00075e  f7fffffe          BL       printhexa
;;;611    	     printhexa(DestPort&0xFF);
000762  88a0              LDRH     r0,[r4,#4]  ; DestPort
000764  b2c0              UXTB     r0,r0
000766  f7fffffe          BL       printhexa
;;;612    	     print("\nSource: ");
00076a  a03c              ADR      r0,|L1.2140|
00076c  f7fffffe          BL       print
;;;613    	     printhexa((SrcPort>>8)&0xFF);
000770  88e0              LDRH     r0,[r4,#6]  ; SrcPort
000772  0a00              LSRS     r0,r0,#8
000774  f7fffffe          BL       printhexa
;;;614    	     printhexa(SrcPort&0xFF);
000778  88e0              LDRH     r0,[r4,#6]  ; SrcPort
00077a  b2c0              UXTB     r0,r0
00077c  f7fffffe          BL       printhexa
;;;615    	     print("\n");
000780  a021              ADR      r0,|L1.2056|
000782  f7fffffe          BL       print
;;;616    #endif
;;;617             /* save Host MAC address   */
;;;618    	     memcpy(HostMAC,FRAMEr->source,6);
000786  482f              LDR      r0,|L1.2116|
000788  2206              MOVS     r2,#6
00078a  1da9              ADDS     r1,r5,#6
00078c  301e              ADDS     r0,r0,#0x1e
00078e  f7fffffe          BL       __aeabi_memcpy
;;;619    
;;;620    #if ETHERNET_DEBUG
;;;621             /* print Host MAC address  */
;;;622    	     print("\nSource MAC: ");
000792  a035              ADR      r0,|L1.2152|
000794  f7fffffe          BL       print
;;;623    	     printhexa(HostMAC[5]);
000798  4d2a              LDR      r5,|L1.2116|
00079a  351e              ADDS     r5,r5,#0x1e
00079c  7968              LDRB     r0,[r5,#5]  ; HostMAC
00079e  f7fffffe          BL       printhexa
;;;624    	     printhexa(HostMAC[4]);
0007a2  7928              LDRB     r0,[r5,#4]  ; HostMAC
0007a4  f7fffffe          BL       printhexa
;;;625    	     printhexa(HostMAC[3]);
0007a8  78e8              LDRB     r0,[r5,#3]  ; HostMAC
0007aa  f7fffffe          BL       printhexa
;;;626    	     printhexa(HostMAC[2]);
0007ae  78a8              LDRB     r0,[r5,#2]  ; HostMAC
0007b0  f7fffffe          BL       printhexa
;;;627    	     printhexa(HostMAC[1]);
0007b4  7868              LDRB     r0,[r5,#1]  ; HostMAC
0007b6  f7fffffe          BL       printhexa
;;;628    	     printhexa(HostMAC[0]);
0007ba  7828              LDRB     r0,[r5,#0]  ; HostMAC
0007bc  f7fffffe          BL       printhexa
;;;629    	     print("\n");
0007c0  a011              ADR      r0,|L1.2056|
0007c2  f7fffffe          BL       print
;;;630    #endif
;;;631    
;;;632             emac_sendline_crlf((char *)&sync[0]);         
0007c6  482c              LDR      r0,|L1.2168|
0007c8  f7fffffe          BL       emac_sendline_crlf
;;;633             emac_getline(buf,15,&count);
0007cc  aa08              ADD      r2,sp,#0x20
0007ce  210f              MOVS     r1,#0xf
0007d0  a804              ADD      r0,sp,#0x10
0007d2  f7fffffe          BL       emac_getline
;;;634    	     memcpy(&buf1[0],&sync[0],sizeof(sync));
0007d6  220d              MOVS     r2,#0xd
0007d8  4927              LDR      r1,|L1.2168|
0007da  4668              MOV      r0,sp
0007dc  f7fffffe          BL       __aeabi_memcpy
;;;635    	     if (str_cmp(&buf[0],&buf1[0])==0) {
0007e0  4669              MOV      r1,sp
0007e2  a804              ADD      r0,sp,#0x10
0007e4  f7fffffe          BL       str_cmp
0007e8  2800              CMP      r0,#0
0007ea  d1a3              BNE      |L1.1844|
;;;636               emac_sendline_crlf((char *)&Ok[0]);
0007ec  4822              LDR      r0,|L1.2168|
0007ee  1ec0              SUBS     r0,r0,#3
0007f0  f7fffffe          BL       emac_sendline_crlf
;;;637    		   synchro = true;
0007f4  2001              MOVS     r0,#1
0007f6  7020              STRB     r0,[r4,#0]
;;;638    		   break;
;;;639    	     }
;;;640           }
;;;641    	 }
;;;642       }
;;;643    }
0007f8  b009              ADD      sp,sp,#0x24
0007fa  bd30              POP      {r4,r5,pc}
;;;644    
                          ENDP

                  |L1.2044|
0007fc  527820435243206572726f72        DCB      "Rx CRC error"
                  |L1.2056|
000808  0a00              DCB      "\n",0
00080a  00                DCB      0
00080b  00                DCB      0
                  |L1.2060|
                          DCD      ||.bss||
                  |L1.2064|
000810  52783a202000        DCB      "Rx:  ",0
000816  00                DCB      0
000817  00                DCB      0
                  |L1.2072|
000818  2e2e2e446174612e2e2e00        DCB      "...Data...",0
000823  00                DCB      0
                  |L1.2084|
000824  0d0a202020202000        DCB      "\r\n     ",0
                  |L1.2092|
00082c  0d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0d0a00        DCB      "\r\n-------------------\r\n",0
                  |L1.2116|
                          DCD      ||.data||
                  |L1.2120|
000848  54783a202000        DCB      "Tx:  ",0
00084e  00                DCB      0
00084f  00                DCB      0
                  |L1.2128|
                          DCD      0x10004000
                  |L1.2132|
000854  446573743a2000        DCB      "Dest: ",0
00085b  00                DCB      0
                  |L1.2140|
00085c  0a536f757263653a2000        DCB      "\nSource: ",0
000866  00                DCB      0
000867  00                DCB      0
                  |L1.2152|
000868  0a536f75726365204d41433a2000        DCB      "\nSource MAC: ",0
000876  00                DCB      0
000877  00                DCB      0
                  |L1.2168|
                          DCD      ||.constdata||+0x3

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rxbuffer
                          %        120
                  txbuffer
                          %        120

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ||Ok||
000000  4f4b00            DCB      0x4f,0x4b,0x00
                  sync
000003  53                DCB      0x53
000004  796e6368          DCB      0x79,0x6e,0x63,0x68
000008  726f6e69          DCB      0x72,0x6f,0x6e,0x69
00000c  7a656400          DCB      0x7a,0x65,0x64,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  synchro
000000  0000              DCB      0x00,0x00
                  data_size
000002  0000              DCW      0x0000
                  DestPort
000004  0000              DCB      0x00,0x00
                  SrcPort
000006  0000              DCB      0x00,0x00
                  dev_175x
                          DCD      0x00000000
                  rxptr
                          DCD      0x00000000
                  txptr
                          DCD      0x00000000
                  ethernet_timeout
                          DCD      0x00000000
                  MyMAC
                          DCD      0x00000000
00001c  0000              DCB      0x00,0x00
                  HostMAC
                          DCDU     0x00000000
000022  0000              DCB      0x00,0x00
